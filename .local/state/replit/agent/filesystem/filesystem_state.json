{"file_contents":{"design_guidelines.md":{"content":"# Saga Inventory - Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Design System - Material Design 3 with modern Shadcn/ui aesthetics\n\n**Justification:** As a data-intensive business application requiring efficiency, reliability, and clarity, we need a proven design system that excels at information hierarchy and functional interfaces. Material Design 3's emphasis on data tables, forms, and adaptive layouts combined with Shadcn/ui's clean, modern aesthetic creates the perfect foundation for enterprise inventory management.\n\n**Core Principles:**\n- Clarity over decoration - every element serves a purpose\n- Information hierarchy through consistent spacing and typography\n- Efficient workflows with minimal clicks\n- Responsive data visualization\n- Professional, trustworthy appearance\n\n## Color Palette\n\n**Dark Mode (Primary):**\n- Background: 222 47% 11% (deep slate)\n- Surface: 217 33% 17% (elevated slate)\n- Surface Variant: 217 33% 20% (cards/containers)\n- Primary Brand: 221 83% 53% (vibrant blue - trust/reliability)\n- Primary Hover: 221 83% 58%\n- Success: 142 71% 45% (green - profit indicators)\n- Warning: 38 92% 50% (amber - low stock alerts)\n- Danger: 0 84% 60% (red - critical alerts)\n- Text Primary: 210 40% 98%\n- Text Secondary: 215 20% 65%\n- Border: 217 33% 25%\n\n**Light Mode:**\n- Background: 0 0% 100%\n- Surface: 210 20% 98%\n- Surface Variant: 214 32% 95%\n- Primary Brand: 221 83% 53% (consistent across modes)\n- Text Primary: 222 47% 11%\n- Text Secondary: 215 16% 47%\n- Border: 214 32% 91%\n\n## Typography\n\n**Font Families:**\n- Primary: 'Inter' (Google Fonts) - exceptional readability for data-dense UIs\n- Monospace: 'JetBrains Mono' - for stock codes, receipt numbers, prices\n\n**Type Scale:**\n- Hero/Dashboard Headers: text-4xl font-bold (36px)\n- Section Headers: text-2xl font-semibold (24px)\n- Card Headers: text-lg font-semibold (18px)\n- Body Text: text-base (16px)\n- Secondary/Meta: text-sm (14px)\n- Table Data: text-sm font-medium\n- Numeric Values: text-base font-mono font-semibold\n\n## Layout System\n\n**Spacing Primitives:** Tailwind units of 2, 4, 6, 8, 12, 16\n- Micro spacing (form elements): p-2, gap-2\n- Standard component padding: p-4, p-6\n- Card/Section spacing: p-6, p-8\n- Page margins: p-8, p-12\n- Section breaks: mb-12, mb-16\n\n**Grid System:**\n- Dashboard: 12-column grid with responsive breakpoints\n- Forms: Single column mobile, 2-column tablet, 2-3 column desktop\n- Data tables: Full-width with horizontal scroll on mobile\n- Analytics cards: 1 column mobile, 2-3 columns desktop\n\n## Component Library\n\n**Navigation:**\n- Sidebar navigation (collapsible on mobile)\n- Top bar with search, notifications, user profile\n- Breadcrumbs for deep navigation paths\n- Active state: primary brand color with left border accent\n\n**Data Display:**\n- Tables: Striped rows, hover states, sortable headers, pagination\n- Cards: Elevated surfaces with subtle shadows, border-radius of 0.75rem\n- Statistics widgets: Large numbers with trend indicators (arrows/percentages)\n- Charts: Clean line/bar charts using Chart.js with brand color palette\n\n**Forms:**\n- Input fields: Outlined style with focus ring in primary color\n- Labels: Above inputs, text-sm font-medium\n- Validation: Inline error messages in danger color\n- Select dropdowns: Custom styled with search capability\n- Date pickers: Calendar overlay with range selection\n- Buttons: Solid primary, outline secondary, ghost tertiary\n\n**Overlays:**\n- Modals: Centered, max-width 2xl, backdrop blur\n- Dropdowns: Attached to trigger, shadow-lg\n- Toasts: Top-right position, auto-dismiss with action buttons\n- Confirmation dialogs: Centered, clear action buttons\n\n**Action Buttons:**\n- Primary CTA: bg-primary text-white, px-6 py-3, rounded-lg\n- Secondary: variant=\"outline\" with border-primary\n- Danger actions: bg-danger for delete/cancel operations\n- Icon buttons: p-2, rounded-md for table actions\n\n**Status Indicators:**\n- Stock levels: Green (In Stock), Amber (Low Stock), Red (Out of Stock)\n- Payment status: Green (Paid), Amber (Partial), Red (Due)\n- Badges: Rounded-full with colored backgrounds, px-3 py-1\n\n## Page-Specific Layouts\n\n**Dashboard:**\n- 4 metric cards at top (Total Products, Today's Sales, Low Stock Alerts, Profit Today)\n- 2-column layout: Recent transactions list + Quick actions sidebar\n- Charts section: Sales trend line chart, Category distribution pie chart\n- All metrics use large monospace numbers with trend indicators\n\n**Product Management:**\n- Search bar and filters at top\n- Grid view of product cards (3-4 columns desktop) with stock badges\n- Table view option with sortable columns\n- Quick action buttons: Add Product (top-right), Edit/Delete (per row)\n\n**Sales Interface:**\n- 2-column layout: Product selection (left 60%) + Cart preview (right 40%)\n- Product search with real-time results\n- Cart items with quantity adjusters, remove buttons\n- Discount input field with percentage/fixed toggle\n- Payment method selection as prominent buttons\n- Total calculation panel with breakdown (Subtotal, Discount, Final Total)\n\n**Receipt View:**\n- Clean, printable design with business header\n- Two-column layout: Business info + Customer info\n- Product table with columns: Code, Name, Qty, Price, Subtotal\n- Summary section: Subtotal, Discount, Payment method, Total\n- Footer with thank you message and QR code placeholder\n- Print and Download PDF buttons (outline variant)\n\n**Reports Dashboard:**\n- Tab navigation for different report types\n- Date range selector at top-right\n- Export buttons (CSV, PDF) for each report\n- Charts with interactive tooltips\n- Filterable data tables below charts\n\n## Animations\n\n**Minimal, Purpose-Driven:**\n- Page transitions: Fade in (200ms)\n- Modal entrance: Scale from 0.95 to 1 (150ms)\n- Toast notifications: Slide in from right (200ms)\n- Hover states: Subtle background color transitions (150ms)\n- Loading states: Spinner animations for async operations\n- **No** scroll-triggered animations, parallax, or decorative motion\n\n## Images\n\n**No hero images required** - This is a utility application, not a marketing site.\n\n**Icons Only:**\n- Use Lucide React icons throughout (via CDN or package)\n- Navigation: Dashboard, Package, ShoppingCart, Users, FileText, Settings icons\n- Actions: Plus, Edit, Trash2, Download, Printer icons\n- Status: AlertTriangle, CheckCircle, XCircle icons\n- Consistent 20px size for buttons, 24px for headers\n\n## Accessibility\n\n- Maintain WCAG AA contrast ratios (4.5:1 minimum)\n- All interactive elements keyboard accessible\n- Focus visible states with 2px outline in primary color\n- Form labels properly associated with inputs\n- Error messages announced to screen readers\n- Consistent dark mode across all inputs and text fields (no white backgrounds)","size_bytes":6725},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Saga Inventory - Inventory Management System\n\n## Overview\n\nSaga Inventory is a comprehensive inventory management system designed for retail and business operations. The application provides complete product tracking, sales management, customer relationship management, and business analytics. Built as a full-stack web application, it enables businesses to manage their inventory, process sales transactions, generate receipts, track customers and suppliers, and analyze business performance through detailed reports.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System**\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool and development server, configured with custom plugins for Replit integration\n- **Wouter** for client-side routing (lightweight alternative to React Router)\n- **TanStack Query v5** for server state management, data fetching, and caching\n\n**UI Design System**\n- **Shadcn/ui** component library following Material Design 3 principles with \"new-york\" style variant\n- **Tailwind CSS** for utility-first styling with extensive custom theme configuration\n- **Radix UI** primitives for accessible, unstyled component foundations\n- **Dark mode primary** with light mode support via theme provider\n- Custom design tokens defined in CSS variables (HSL color space)\n- Typography: Inter for UI text, JetBrains Mono for data/codes\n\n**State & Form Management**\n- React Hook Form with Zod validation resolvers for form handling\n- Local component state for UI interactions (modals, search, filters)\n- Query invalidation patterns for optimistic updates\n\n**Code Organization**\n- Component-based architecture with clear separation:\n  - `/client/src/pages/*` - Route-level page components\n  - `/client/src/components/*` - Reusable UI components\n  - `/client/src/components/ui/*` - Shadcn base components\n  - `/client/src/lib/*` - Utility functions and shared logic\n  - `/client/src/hooks/*` - Custom React hooks\n\n### Backend Architecture\n\n**Runtime & Framework**\n- **Node.js** with ES modules\n- **Express.js** REST API server\n- **TypeScript** for type safety across the stack\n\n**API Design**\n- RESTful endpoints following resource-based URL patterns\n- Standard HTTP methods (GET, POST, PATCH, DELETE)\n- JSON request/response format\n- Centralized error handling middleware\n- Request logging with timing metrics\n\n**Business Logic Layer**\n- Storage abstraction layer (`server/storage.ts`) defining interface contracts\n- Separation of route handlers (`server/routes.ts`) from data access\n- Transaction support for multi-step operations (sales with inventory updates)\n- Validation using Zod schemas shared between client and server\n\n### Data Storage Solutions\n\n**Database**\n- **PostgreSQL** via Neon serverless driver with WebSocket support\n- **Drizzle ORM** for type-safe database queries and schema management\n- Schema-first approach with TypeScript types generated from database schema\n\n**Schema Design** (`shared/schema.ts`)\n- **suppliers** - Supplier contact information\n- **customers** - Customer records with contact details\n- **sellers** - Employee/seller information\n- **products** - Product catalog with pricing, stock levels, categories, and supplier relationships\n- **sales** - Sales transaction headers with customer, seller, payment, and totals\n- **saleItems** - Line items for each sale linking products and quantities\n\n**Key Relationships**\n- Products reference suppliers (many-to-one)\n- Sales reference customers and sellers (many-to-one)\n- Sale items reference sales and products (many-to-one)\n\n**Data Integrity**\n- UUID primary keys using `gen_random_uuid()`\n- Foreign key constraints for referential integrity\n- Unique constraints on business identifiers (stock codes, receipt numbers)\n- Timestamp tracking with `created_at` fields\n\n### Authentication and Authorization\n\n**Current State**: No authentication system implemented. The application assumes a trusted single-user or internal network environment.\n\n**Future Considerations**: Session-based authentication with `connect-pg-simple` package already included for PostgreSQL session storage.\n\n### External Dependencies\n\n**Database Services**\n- **Neon Database** - Serverless PostgreSQL with WebSocket connection pooling\n- Connection managed via `DATABASE_URL` environment variable\n- Migration management through Drizzle Kit\n\n**Google Fonts**\n- Inter font family (weights: 300, 400, 500, 600, 700)\n- JetBrains Mono (weights: 400, 500, 600)\n- Loaded via Google Fonts CDN with preconnect optimization\n\n**Build & Development Tools**\n- **Replit-specific plugins** for development environment integration:\n  - `@replit/vite-plugin-runtime-error-modal` - Error overlay in development\n  - `@replit/vite-plugin-cartographer` - Code navigation tools\n  - `@replit/vite-plugin-dev-banner` - Development environment banner\n\n**Third-Party UI Libraries**\n- **Radix UI** - 20+ component primitives for accessibility\n- **Lucide React** - Icon library\n- **date-fns** - Date formatting and manipulation\n- **cmdk** - Command palette component\n- **embla-carousel-react** - Carousel functionality\n- **vaul** - Drawer component\n\n**Development Dependencies**\n- **tsx** - TypeScript execution for development server\n- **esbuild** - Production build bundler for server code\n- **drizzle-kit** - Database migration and introspection tool","size_bytes":5436},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        success: \"hsl(var(--chart-2) / <alpha-value>)\",\n        warning: \"hsl(var(--chart-3) / <alpha-value>)\",\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4162},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertSupplierSchema,\n  insertCustomerSchema,\n  insertSellerSchema,\n  insertProductSchema,\n  insertSaleSchema,\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Suppliers\n  app.get(\"/api/suppliers\", async (_req, res) => {\n    const suppliers = await storage.getSuppliers();\n    res.json(suppliers);\n  });\n\n  app.get(\"/api/suppliers/:id\", async (req, res) => {\n    const supplier = await storage.getSupplier(req.params.id);\n    if (!supplier) {\n      return res.status(404).json({ error: \"Supplier not found\" });\n    }\n    res.json(supplier);\n  });\n\n  app.post(\"/api/suppliers\", async (req, res) => {\n    try {\n      const data = insertSupplierSchema.parse(req.body);\n      const supplier = await storage.createSupplier(data);\n      res.status(201).json(supplier);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/suppliers/:id\", async (req, res) => {\n    try {\n      const data = insertSupplierSchema.partial().parse(req.body);\n      const supplier = await storage.updateSupplier(req.params.id, data);\n      if (!supplier) {\n        return res.status(404).json({ error: \"Supplier not found\" });\n      }\n      res.json(supplier);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/suppliers/:id\", async (req, res) => {\n    const success = await storage.deleteSupplier(req.params.id);\n    if (!success) {\n      return res.status(404).json({ error: \"Supplier not found\" });\n    }\n    res.status(204).send();\n  });\n\n  // Customers\n  app.get(\"/api/customers\", async (_req, res) => {\n    const customers = await storage.getCustomers();\n    \n    // Enrich with stats\n    const enriched = await Promise.all(\n      customers.map(async (customer) => {\n        const stats = await storage.getCustomerStats(customer.id);\n        return { ...customer, ...stats };\n      })\n    );\n    \n    res.json(enriched);\n  });\n\n  app.get(\"/api/customers/:id\", async (req, res) => {\n    const customer = await storage.getCustomer(req.params.id);\n    if (!customer) {\n      return res.status(404).json({ error: \"Customer not found\" });\n    }\n    const stats = await storage.getCustomerStats(customer.id);\n    res.json({ ...customer, ...stats });\n  });\n\n  app.post(\"/api/customers\", async (req, res) => {\n    try {\n      const data = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(data);\n      res.status(201).json(customer);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/customers/:id\", async (req, res) => {\n    try {\n      const data = insertCustomerSchema.partial().parse(req.body);\n      const customer = await storage.updateCustomer(req.params.id, data);\n      if (!customer) {\n        return res.status(404).json({ error: \"Customer not found\" });\n      }\n      res.json(customer);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/customers/:id\", async (req, res) => {\n    const success = await storage.deleteCustomer(req.params.id);\n    if (!success) {\n      return res.status(404).json({ error: \"Customer not found\" });\n    }\n    res.status(204).send();\n  });\n\n  // Sellers\n  app.get(\"/api/sellers\", async (_req, res) => {\n    const sellers = await storage.getSellers();\n    \n    // Enrich with stats\n    const enriched = await Promise.all(\n      sellers.map(async (seller) => {\n        const stats = await storage.getSellerStats(seller.id);\n        return { ...seller, ...stats };\n      })\n    );\n    \n    res.json(enriched);\n  });\n\n  app.get(\"/api/sellers/:id\", async (req, res) => {\n    const seller = await storage.getSeller(req.params.id);\n    if (!seller) {\n      return res.status(404).json({ error: \"Seller not found\" });\n    }\n    const stats = await storage.getSellerStats(seller.id);\n    res.json({ ...seller, ...stats });\n  });\n\n  app.post(\"/api/sellers\", async (req, res) => {\n    try {\n      const data = insertSellerSchema.parse(req.body);\n      const seller = await storage.createSeller(data);\n      res.status(201).json(seller);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/sellers/:id\", async (req, res) => {\n    try {\n      const data = insertSellerSchema.partial().parse(req.body);\n      const seller = await storage.updateSeller(req.params.id, data);\n      if (!seller) {\n        return res.status(404).json({ error: \"Seller not found\" });\n      }\n      res.json(seller);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/sellers/:id\", async (req, res) => {\n    const success = await storage.deleteSeller(req.params.id);\n    if (!success) {\n      return res.status(404).json({ error: \"Seller not found\" });\n    }\n    res.status(204).send();\n  });\n\n  // Products\n  app.get(\"/api/products\", async (req, res) => {\n    const { search } = req.query;\n    \n    let products;\n    if (search && typeof search === \"string\") {\n      products = await storage.searchProducts(search);\n    } else {\n      products = await storage.getProducts();\n    }\n    \n    res.json(products);\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    const product = await storage.getProduct(req.params.id);\n    if (!product) {\n      return res.status(404).json({ error: \"Product not found\" });\n    }\n    res.json(product);\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const data = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(data);\n      res.status(201).json(product);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/products/:id\", async (req, res) => {\n    try {\n      const data = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, data);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    const success = await storage.deleteProduct(req.params.id);\n    if (!success) {\n      return res.status(404).json({ error: \"Product not found\" });\n    }\n    res.status(204).send();\n  });\n\n  // Sales\n  app.get(\"/api/sales\", async (_req, res) => {\n    const sales = await storage.getSales();\n    res.json(sales);\n  });\n\n  app.get(\"/api/sales/recent\", async (req, res) => {\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n    const sales = await storage.getRecentSales(limit);\n    res.json(sales);\n  });\n\n  app.get(\"/api/sales/:id\", async (req, res) => {\n    const saleWithItems = await storage.getSaleWithItems(req.params.id);\n    if (!saleWithItems) {\n      return res.status(404).json({ error: \"Sale not found\" });\n    }\n    res.json(saleWithItems);\n  });\n\n  app.post(\"/api/sales\", async (req, res) => {\n    try {\n      const data = insertSaleSchema.parse(req.body);\n      const result = await storage.createSale(data);\n      res.status(201).json(result);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Dashboard\n  app.get(\"/api/dashboard/stats\", async (_req, res) => {\n    const stats = await storage.getDashboardStats();\n    res.json(stats);\n  });\n\n  app.get(\"/api/dashboard/low-stock\", async (req, res) => {\n    const threshold = req.query.threshold ? parseInt(req.query.threshold as string) : 20;\n    const products = await storage.getLowStockProducts(threshold);\n    res.json(products);\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":7957},"server/storage.ts":{"content":"import { eq, desc, sql, like, or } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport {\n  suppliers,\n  customers,\n  sellers,\n  products,\n  sales,\n  saleItems,\n  type Supplier,\n  type Customer,\n  type Seller,\n  type Product,\n  type Sale,\n  type SaleItem,\n  type InsertSupplier,\n  type InsertCustomer,\n  type InsertSeller,\n  type InsertProduct,\n  type InsertSale,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Suppliers\n  getSuppliers(): Promise<Supplier[]>;\n  getSupplier(id: string): Promise<Supplier | undefined>;\n  createSupplier(supplier: InsertSupplier): Promise<Supplier>;\n  updateSupplier(id: string, supplier: Partial<InsertSupplier>): Promise<Supplier | undefined>;\n  deleteSupplier(id: string): Promise<boolean>;\n\n  // Customers\n  getCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer | undefined>;\n  deleteCustomer(id: string): Promise<boolean>;\n\n  // Sellers\n  getSellers(): Promise<Seller[]>;\n  getSeller(id: string): Promise<Seller | undefined>;\n  createSeller(seller: InsertSeller): Promise<Seller>;\n  updateSeller(id: string, seller: Partial<InsertSeller>): Promise<Seller | undefined>;\n  deleteSeller(id: string): Promise<boolean>;\n\n  // Products\n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductByStockCode(stockCode: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  searchProducts(query: string): Promise<Product[]>;\n\n  // Sales\n  getSales(): Promise<Sale[]>;\n  getSale(id: string): Promise<Sale | undefined>;\n  getSaleWithItems(id: string): Promise<{ sale: Sale; items: SaleItem[] } | undefined>;\n  createSale(sale: InsertSale): Promise<{ sale: Sale; items: SaleItem[] }>;\n  \n  // Analytics\n  getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaysSales: number;\n    lowStockCount: number;\n    todaysProfit: number;\n  }>;\n  getLowStockProducts(threshold: number): Promise<Product[]>;\n  getRecentSales(limit: number): Promise<Array<Sale & { customerName: string; sellerName: string }>>;\n  getCustomerStats(customerId: string): Promise<{ totalPurchases: number; totalSpent: number }>;\n  getSellerStats(sellerId: string): Promise<{ totalSales: number; totalRevenue: number }>;\n}\n\nexport class DbStorage implements IStorage {\n  // Suppliers\n  async getSuppliers(): Promise<Supplier[]> {\n    return db.select().from(suppliers).orderBy(desc(suppliers.createdAt));\n  }\n\n  async getSupplier(id: string): Promise<Supplier | undefined> {\n    const result = await db.select().from(suppliers).where(eq(suppliers.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createSupplier(supplier: InsertSupplier): Promise<Supplier> {\n    const result = await db.insert(suppliers).values(supplier).returning();\n    return result[0];\n  }\n\n  async updateSupplier(id: string, supplier: Partial<InsertSupplier>): Promise<Supplier | undefined> {\n    const result = await db.update(suppliers).set(supplier).where(eq(suppliers.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteSupplier(id: string): Promise<boolean> {\n    const result = await db.delete(suppliers).where(eq(suppliers.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Customers\n  async getCustomers(): Promise<Customer[]> {\n    return db.select().from(customers).orderBy(desc(customers.createdAt));\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const result = await db.select().from(customers).where(eq(customers.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const result = await db.insert(customers).values(customer).returning();\n    return result[0];\n  }\n\n  async updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer | undefined> {\n    const result = await db.update(customers).set(customer).where(eq(customers.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteCustomer(id: string): Promise<boolean> {\n    const result = await db.delete(customers).where(eq(customers.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Sellers\n  async getSellers(): Promise<Seller[]> {\n    return db.select().from(sellers).orderBy(desc(sellers.createdAt));\n  }\n\n  async getSeller(id: string): Promise<Seller | undefined> {\n    const result = await db.select().from(sellers).where(eq(sellers.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createSeller(seller: InsertSeller): Promise<Seller> {\n    const result = await db.insert(sellers).values(seller).returning();\n    return result[0];\n  }\n\n  async updateSeller(id: string, seller: Partial<InsertSeller>): Promise<Seller | undefined> {\n    const result = await db.update(sellers).set(seller).where(eq(sellers.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteSeller(id: string): Promise<boolean> {\n    const result = await db.delete(sellers).where(eq(sellers.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return db.select().from(products).orderBy(desc(products.createdAt));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const result = await db.select().from(products).where(eq(products.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getProductByStockCode(stockCode: string): Promise<Product | undefined> {\n    const result = await db.select().from(products).where(eq(products.stockCode, stockCode)).limit(1);\n    return result[0];\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const result = await db.insert(products).values(product).returning();\n    return result[0];\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const result = await db.update(products).set(product).where(eq(products.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const result = await db.delete(products).where(eq(products.id, id)).returning();\n    return result.length > 0;\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    const searchPattern = `%${query}%`;\n    return db.select().from(products).where(\n      or(\n        like(products.name, searchPattern),\n        like(products.stockCode, searchPattern),\n        like(products.category, searchPattern)\n      )\n    ).limit(20);\n  }\n\n  // Sales\n  async getSales(): Promise<Sale[]> {\n    return db.select().from(sales).orderBy(desc(sales.createdAt));\n  }\n\n  async getSale(id: string): Promise<Sale | undefined> {\n    const result = await db.select().from(sales).where(eq(sales.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getSaleWithItems(id: string): Promise<{ sale: Sale; items: SaleItem[] } | undefined> {\n    const sale = await this.getSale(id);\n    if (!sale) return undefined;\n\n    const items = await db.select().from(saleItems).where(eq(saleItems.saleId, id));\n    return { sale, items };\n  }\n\n  async createSale(saleData: InsertSale): Promise<{ sale: Sale; items: SaleItem[] }> {\n    const { items: saleItemsData, ...saleInfo } = saleData;\n\n    // Generate receipt number\n    const count = await db.select({ count: sql<number>`count(*)` }).from(sales);\n    const receiptNumber = `RCP-${new Date().getFullYear()}-${String(count[0].count + 1).padStart(6, '0')}`;\n\n    // Create sale\n    const saleResult = await db.insert(sales).values({\n      ...saleInfo,\n      receiptNumber,\n    }).returning();\n    const sale = saleResult[0];\n\n    // Create sale items and update product quantities\n    const items: SaleItem[] = [];\n    for (const item of saleItemsData) {\n      const itemResult = await db.insert(saleItems).values({\n        ...item,\n        saleId: sale.id,\n      }).returning();\n      items.push(itemResult[0]);\n\n      // Decrease product quantity\n      await db.update(products)\n        .set({ quantity: sql`${products.quantity} - ${item.quantity}` })\n        .where(eq(products.id, item.productId));\n    }\n\n    return { sale, items };\n  }\n\n  // Analytics\n  async getDashboardStats() {\n    const totalProductsResult = await db.select({ count: sql<number>`count(*)` }).from(products);\n    const totalProducts = totalProductsResult[0].count;\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const todaysSalesResult = await db.select({\n      total: sql<number>`COALESCE(SUM(CAST(${sales.total} AS NUMERIC)), 0)`,\n      count: sql<number>`count(*)`\n    })\n    .from(sales)\n    .where(sql`${sales.createdAt} >= ${today}`);\n\n    const todaysSales = Number(todaysSalesResult[0]?.total || 0);\n\n    const lowStockResult = await db.select({ count: sql<number>`count(*)` })\n      .from(products)\n      .where(sql`${products.quantity} < 20`);\n    const lowStockCount = lowStockResult[0].count;\n\n    // Calculate today's profit\n    const todaysProfitResult = await db.select({\n      profit: sql<number>`\n        COALESCE(SUM(\n          (CAST(${saleItems.unitPrice} AS NUMERIC) - CAST(${saleItems.buyingPrice} AS NUMERIC)) \n          * ${saleItems.quantity}\n        ), 0)\n      `\n    })\n    .from(saleItems)\n    .innerJoin(sales, eq(saleItems.saleId, sales.id))\n    .where(sql`${sales.createdAt} >= ${today}`);\n\n    const todaysProfit = Number(todaysProfitResult[0]?.profit || 0);\n\n    return {\n      totalProducts,\n      todaysSales,\n      lowStockCount,\n      todaysProfit,\n    };\n  }\n\n  async getLowStockProducts(threshold: number = 20): Promise<Product[]> {\n    return db.select().from(products).where(sql`${products.quantity} < ${threshold}`).orderBy(products.quantity);\n  }\n\n  async getRecentSales(limit: number = 10) {\n    const result = await db.select({\n      id: sales.id,\n      receiptNumber: sales.receiptNumber,\n      customerId: sales.customerId,\n      sellerId: sales.sellerId,\n      subtotal: sales.subtotal,\n      discount: sales.discount,\n      discountType: sales.discountType,\n      total: sales.total,\n      paymentMethod: sales.paymentMethod,\n      createdAt: sales.createdAt,\n      customerName: customers.name,\n      sellerName: sellers.name,\n    })\n    .from(sales)\n    .innerJoin(customers, eq(sales.customerId, customers.id))\n    .innerJoin(sellers, eq(sales.sellerId, sellers.id))\n    .orderBy(desc(sales.createdAt))\n    .limit(limit);\n\n    return result;\n  }\n\n  async getCustomerStats(customerId: string) {\n    const result = await db.select({\n      totalPurchases: sql<number>`count(*)`,\n      totalSpent: sql<number>`COALESCE(SUM(CAST(${sales.total} AS NUMERIC)), 0)`,\n    })\n    .from(sales)\n    .where(eq(sales.customerId, customerId));\n\n    return {\n      totalPurchases: result[0]?.totalPurchases || 0,\n      totalSpent: Number(result[0]?.totalSpent || 0),\n    };\n  }\n\n  async getSellerStats(sellerId: string) {\n    const result = await db.select({\n      totalSales: sql<number>`count(*)`,\n      totalRevenue: sql<number>`COALESCE(SUM(CAST(${sales.total} AS NUMERIC)), 0)`,\n    })\n    .from(sales)\n    .where(eq(sales.sellerId, sellerId));\n\n    return {\n      totalSales: result[0]?.totalSales || 0,\n      totalRevenue: Number(result[0]?.totalRevenue || 0),\n    };\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":11427},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const suppliers = pgTable(\"suppliers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const sellers = pgTable(\"sellers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  stockCode: text(\"stock_code\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(),\n  buyingPrice: decimal(\"buying_price\", { precision: 10, scale: 2 }).notNull(),\n  sellingPrice: decimal(\"selling_price\", { precision: 10, scale: 2 }).notNull(),\n  quantity: integer(\"quantity\").notNull().default(0),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const sales = pgTable(\"sales\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  receiptNumber: text(\"receipt_number\").notNull().unique(),\n  customerId: varchar(\"customer_id\").references(() => customers.id).notNull(),\n  sellerId: varchar(\"seller_id\").references(() => sellers.id).notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  discount: decimal(\"discount\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  discountType: text(\"discount_type\").notNull().default(\"percentage\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const saleItems = pgTable(\"sale_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  saleId: varchar(\"sale_id\").references(() => sales.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  productName: text(\"product_name\").notNull(),\n  stockCode: text(\"stock_code\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  buyingPrice: decimal(\"buying_price\", { precision: 10, scale: 2 }).notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Insert schemas\nexport const insertSupplierSchema = createInsertSchema(suppliers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSellerSchema = createInsertSchema(sellers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  buyingPrice: z.string(),\n  sellingPrice: z.string(),\n  quantity: z.number().int().min(0),\n  supplierId: z.string().nullable().optional(),\n});\n\nexport const insertSaleItemSchema = createInsertSchema(saleItems).omit({\n  id: true,\n  saleId: true,\n}).extend({\n  unitPrice: z.string(),\n  buyingPrice: z.string(),\n  subtotal: z.string(),\n});\n\nexport const insertSaleSchema = createInsertSchema(sales).omit({\n  id: true,\n  createdAt: true,\n  receiptNumber: true,\n}).extend({\n  subtotal: z.string(),\n  discount: z.string(),\n  total: z.string(),\n  items: z.array(insertSaleItemSchema),\n});\n\n// Select types\nexport type Supplier = typeof suppliers.$inferSelect;\nexport type Customer = typeof customers.$inferSelect;\nexport type Seller = typeof sellers.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type Sale = typeof sales.$inferSelect;\nexport type SaleItem = typeof saleItems.$inferSelect;\n\n// Insert types\nexport type InsertSupplier = z.infer<typeof insertSupplierSchema>;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type InsertSeller = z.infer<typeof insertSellerSchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type InsertSale = z.infer<typeof insertSaleSchema>;\nexport type InsertSaleItem = z.infer<typeof insertSaleItemSchema>;\n","size_bytes":4710},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Products from \"@/pages/products\";\nimport Sales from \"@/pages/sales\";\nimport Customers from \"@/pages/customers\";\nimport Suppliers from \"@/pages/suppliers\";\nimport Sellers from \"@/pages/sellers\";\nimport Reports from \"@/pages/reports\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/sales\" component={Sales} />\n      <Route path=\"/customers\" component={Customers} />\n      <Route path=\"/suppliers\" component={Suppliers} />\n      <Route path=\"/sellers\" component={Sellers} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <TooltipProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1 overflow-hidden\">\n                <header className=\"flex items-center justify-between p-4 border-b\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <ThemeToggle />\n                </header>\n                <main className=\"flex-1 overflow-y-auto p-8\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2374},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 222 47% 11%;\n\n  --border: 214 32% 91%;\n\n  --card: 210 20% 98%;\n\n  --card-foreground: 222 47% 11%;\n\n  --card-border: 214 32% 95%;\n\n  --sidebar: 214 32% 95%;\n\n  --sidebar-foreground: 222 47% 11%;\n\n  --sidebar-border: 214 32% 91%;\n\n  --sidebar-primary: 221 83% 53%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 214 32% 91%;\n\n  --sidebar-accent-foreground: 222 47% 11%;\n\n  --sidebar-ring: 221 83% 53%;\n\n  --popover: 210 20% 96%;\n\n  --popover-foreground: 222 47% 11%;\n\n  --popover-border: 214 32% 91%;\n\n  --primary: 221 83% 53%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 214 32% 93%;\n\n  --secondary-foreground: 222 47% 11%;\n\n  --muted: 214 20% 94%;\n\n  --muted-foreground: 215 16% 47%;\n\n  --accent: 214 25% 92%;\n\n  --accent-foreground: 222 47% 11%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 40% 98%;\n\n  --input: 214 32% 85%;\n  --ring: 221 83% 53%;\n  --chart-1: 221 83% 53%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 271 81% 56%;\n  --chart-5: 0 84% 60%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --radius: .75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(222 47% 11% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(222 47% 11% / 0.06), 0px 1px 2px -1px hsl(222 47% 11% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(222 47% 11% / 0.08), 0px 2px 4px -2px hsl(222 47% 11% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(222 47% 11% / 0.10), 0px 3px 6px -3px hsl(222 47% 11% / 0.06);\n  --shadow-lg: 0px 10px 20px -4px hsl(222 47% 11% / 0.12), 0px 4px 8px -4px hsl(222 47% 11% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(222 47% 11% / 0.15), 0px 8px 12px -6px hsl(222 47% 11% / 0.10);\n  --shadow-2xl: 0px 30px 50px -12px hsl(222 47% 11% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 217 33% 25%;\n\n  --card: 217 33% 17%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 217 33% 20%;\n\n  --sidebar: 217 33% 20%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 33% 25%;\n\n  --sidebar-primary: 221 83% 53%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 217 33% 23%;\n\n  --sidebar-accent-foreground: 210 40% 98%;\n\n  --sidebar-ring: 221 83% 58%;\n\n  --popover: 217 33% 22%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 217 33% 27%;\n\n  --primary: 221 83% 53%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 217 33% 25%;\n\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 217 20% 24%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 217 25% 23%;\n\n  --accent-foreground: 210 40% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 40% 98%;\n\n  --input: 217 33% 30%;\n  --ring: 221 83% 58%;\n  --chart-1: 221 83% 63%;\n  --chart-2: 142 71% 55%;\n  --chart-3: 38 92% 60%;\n  --chart-4: 271 81% 66%;\n  --chart-5: 0 84% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.12);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.22), 0px 2px 4px -2px hsl(0 0% 0% / 0.15);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.28), 0px 3px 6px -3px hsl(0 0% 0% / 0.18);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.35), 0px 4px 8px -4px hsl(0 0% 0% / 0.22);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.42), 0px 8px 12px -6px hsl(0 0% 0% / 0.28);\n  --shadow-2xl: 0px 30px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10820},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/app-sidebar.tsx":{"content":"import {\n  LayoutDashboard,\n  Package,\n  ShoppingCart,\n  Users,\n  Truck,\n  UserCircle,\n  FileText,\n  Settings,\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\n\nconst mainItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: LayoutDashboard,\n    testId: \"link-dashboard\",\n  },\n  {\n    title: \"Products\",\n    url: \"/products\",\n    icon: Package,\n    testId: \"link-products\",\n  },\n  {\n    title: \"Sales\",\n    url: \"/sales\",\n    icon: ShoppingCart,\n    testId: \"link-sales\",\n  },\n];\n\nconst managementItems = [\n  {\n    title: \"Customers\",\n    url: \"/customers\",\n    icon: Users,\n    testId: \"link-customers\",\n  },\n  {\n    title: \"Suppliers\",\n    url: \"/suppliers\",\n    icon: Truck,\n    testId: \"link-suppliers\",\n  },\n  {\n    title: \"Sellers\",\n    url: \"/sellers\",\n    icon: UserCircle,\n    testId: \"link-sellers\",\n  },\n];\n\nconst reportsItems = [\n  {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: FileText,\n    testId: \"link-reports\",\n  },\n];\n\nconst settingsItems = [\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n    testId: \"link-settings\",\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-9 w-9 items-center justify-center rounded-md bg-primary text-primary-foreground\">\n            <Package className=\"h-5 w-5\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold\">Saga Inventory</h1>\n            <p className=\"text-xs text-muted-foreground\">Inventory Management</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Main</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {mainItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={item.testId}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Management</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {managementItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={item.testId}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Analytics</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {reportsItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={item.testId}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup className=\"mt-auto\">\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {settingsItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={item.testId}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}\n","size_bytes":4997},"client/src/components/customer-form-dialog.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCustomerSchema, type InsertCustomer, type Customer } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface CustomerFormDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  customer?: Customer;\n  onSubmit: (data: InsertCustomer) => Promise<void>;\n}\n\nexport function CustomerFormDialog({\n  open,\n  onOpenChange,\n  customer,\n  onSubmit,\n}: CustomerFormDialogProps) {\n  const form = useForm<InsertCustomer>({\n    resolver: zodResolver(insertCustomerSchema),\n    defaultValues: {\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (customer) {\n      form.reset({\n        name: customer.name,\n        phone: customer.phone,\n        email: customer.email,\n      });\n    } else {\n      form.reset({\n        name: \"\",\n        phone: \"\",\n        email: \"\",\n      });\n    }\n  }, [customer, form]);\n\n  const handleSubmit = async (data: InsertCustomer) => {\n    await onSubmit(data);\n    onOpenChange(false);\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>{customer ? \"Edit Customer\" : \"Add New Customer\"}</DialogTitle>\n          <DialogDescription>\n            {customer\n              ? \"Update customer information below\"\n              : \"Enter customer details to add to database\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-customer-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Phone</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-customer-phone\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input type=\"email\" {...field} data-testid=\"input-customer-email\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" data-testid=\"button-submit\">\n                {customer ? \"Update Customer\" : \"Add Customer\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3858},"client/src/components/customer-list.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Mail, Phone, DollarSign } from \"lucide-react\";\n\nexport interface Customer {\n  id: string;\n  name: string;\n  phone: string;\n  email: string;\n  totalPurchases: number;\n  totalSpent: number;\n}\n\ninterface CustomerListProps {\n  customers: Customer[];\n  onViewDetails?: (customer: Customer) => void;\n}\n\nexport function CustomerList({ customers, onViewDetails }: CustomerListProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n      {customers.length === 0 ? (\n        <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n          No customers found\n        </div>\n      ) : (\n        customers.map((customer) => (\n          <Card\n            key={customer.id}\n            className=\"hover-elevate\"\n            data-testid={`card-customer-${customer.id}`}\n          >\n            <CardHeader>\n              <CardTitle className=\"text-lg\">{customer.name}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Phone className=\"h-4 w-4\" />\n                  <span>{customer.phone}</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Mail className=\"h-4 w-4\" />\n                  <span className=\"truncate\">{customer.email}</span>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 pt-2\">\n                <Badge variant=\"secondary\">\n                  {customer.totalPurchases} purchases\n                </Badge>\n                <Badge variant=\"secondary\">\n                  <DollarSign className=\"h-3 w-3 mr-1\" />\n                  {customer.totalSpent.toFixed(0)}\n                </Badge>\n              </div>\n\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => onViewDetails?.(customer)}\n                data-testid={`button-view-customer-${customer.id}`}\n              >\n                View Details\n              </Button>\n            </CardContent>\n          </Card>\n        ))\n      )}\n    </div>\n  );\n}\n","size_bytes":2411},"client/src/components/delete-confirm-dialog.tsx":{"content":"import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface DeleteConfirmDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirm: () => void;\n  title?: string;\n  description?: string;\n}\n\nexport function DeleteConfirmDialog({\n  open,\n  onOpenChange,\n  onConfirm,\n  title = \"Are you sure?\",\n  description = \"This action cannot be undone. This will permanently delete this item.\",\n}: DeleteConfirmDialogProps) {\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{title}</AlertDialogTitle>\n          <AlertDialogDescription>{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={onConfirm}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            data-testid=\"button-confirm-delete\"\n          >\n            Delete\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":1348},"client/src/components/invoice.tsx":{"content":"import { format } from \"date-fns\";\nimport { Card } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Button } from \"@/components/ui/button\";\nimport { Printer, Download } from \"lucide-react\";\n\nexport interface InvoiceData {\n  invoiceNumber: string;\n  date: Date;\n  customerName: string;\n  customerEmail: string;\n  customerPhone: string;\n  sellerName: string;\n  items: {\n    stockCode: string;\n    name: string;\n    quantity: number;\n    unitPrice: number;\n    subtotal: number;\n  }[];\n  subtotal: number;\n  discount: number;\n  discountType: string;\n  total: number;\n  paymentMethod: string;\n}\n\ninterface InvoiceProps {\n  data: InvoiceData;\n  onPrint?: () => void;\n  onDownload?: () => void;\n}\n\nexport function Invoice({ data, onPrint, onDownload }: InvoiceProps) {\n  const handlePrint = () => {\n    if (onPrint) {\n      onPrint();\n    } else {\n      window.print();\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex gap-2 print:hidden\">\n        <Button onClick={handlePrint} data-testid=\"button-print-invoice\">\n          <Printer className=\"mr-2 h-4 w-4\" />\n          Print Invoice\n        </Button>\n        {onDownload && (\n          <Button variant=\"outline\" onClick={onDownload} data-testid=\"button-download-invoice\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Download PDF\n          </Button>\n        )}\n      </div>\n\n      <Card className=\"max-w-4xl mx-auto p-8 print:shadow-none print:border-0\">\n        <div className=\"space-y-8\">\n          {/* Header */}\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <h1 className=\"text-4xl font-bold\">INVOICE</h1>\n              <p className=\"text-muted-foreground mt-2\">Saga Inventory</p>\n              <p className=\"text-sm text-muted-foreground\">Inventory Management System</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-muted-foreground\">Invoice Number</div>\n              <div className=\"text-xl font-mono font-semibold\" data-testid=\"text-invoice-number\">\n                {data.invoiceNumber}\n              </div>\n              <div className=\"text-sm text-muted-foreground mt-2\">Date</div>\n              <div className=\"font-medium\" data-testid=\"text-invoice-date\">\n                {format(data.date, \"MMMM dd, yyyy\")}\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Bill To / From */}\n          <div className=\"grid grid-cols-2 gap-8\">\n            <div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground mb-2\">BILL TO</h3>\n              <div className=\"space-y-1\">\n                <div className=\"font-semibold\" data-testid=\"text-customer-name\">\n                  {data.customerName}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">{data.customerEmail}</div>\n                <div className=\"text-sm text-muted-foreground\">{data.customerPhone}</div>\n              </div>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground mb-2\">PREPARED BY</h3>\n              <div className=\"space-y-1\">\n                <div className=\"font-semibold\" data-testid=\"text-seller-name\">\n                  {data.sellerName}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Saga Inventory</div>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Items Table */}\n          <div>\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left py-3 font-semibold text-sm\">ITEM</th>\n                  <th className=\"text-left py-3 font-semibold text-sm\">STOCK CODE</th>\n                  <th className=\"text-right py-3 font-semibold text-sm\">QTY</th>\n                  <th className=\"text-right py-3 font-semibold text-sm\">UNIT PRICE</th>\n                  <th className=\"text-right py-3 font-semibold text-sm\">AMOUNT</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.items.map((item, index) => (\n                  <tr key={index} className=\"border-b\">\n                    <td className=\"py-4\">{item.name}</td>\n                    <td className=\"py-4 font-mono text-sm text-muted-foreground\">\n                      {item.stockCode}\n                    </td>\n                    <td className=\"py-4 text-right font-mono\">{item.quantity}</td>\n                    <td className=\"py-4 text-right font-mono\">\n                      ${item.unitPrice.toFixed(2)}\n                    </td>\n                    <td className=\"py-4 text-right font-mono font-semibold\">\n                      ${item.subtotal.toFixed(2)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Totals */}\n          <div className=\"flex justify-end\">\n            <div className=\"w-80 space-y-3\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Subtotal:</span>\n                <span className=\"font-mono\">${data.subtotal.toFixed(2)}</span>\n              </div>\n              {data.discount > 0 && (\n                <div className=\"flex justify-between text-sm text-destructive\">\n                  <span>\n                    Discount {data.discountType === \"percentage\" ? `(${data.discount}%)` : \"\"}:\n                  </span>\n                  <span className=\"font-mono\">\n                    -${(data.discountType === \"percentage\"\n                      ? (data.subtotal * data.discount) / 100\n                      : data.discount\n                    ).toFixed(2)}\n                  </span>\n                </div>\n              )}\n              <Separator />\n              <div className=\"flex justify-between text-lg font-bold\">\n                <span>Total:</span>\n                <span className=\"font-mono\" data-testid=\"text-invoice-total\">\n                  ${data.total.toFixed(2)}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Payment Method:</span>\n                <span className=\"capitalize\">{data.paymentMethod}</span>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Footer */}\n          <div className=\"text-center space-y-2\">\n            <p className=\"text-sm text-muted-foreground\">\n              Thank you for your business!\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              This is a computer-generated invoice and does not require a signature.\n            </p>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6874},"client/src/components/payment-method-selector.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { CreditCard, Banknote, Smartphone, Clock } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport type PaymentMethod = \"cash\" | \"card\" | \"mobile\" | \"due\";\n\ninterface PaymentMethodSelectorProps {\n  selected: PaymentMethod;\n  onSelect: (method: PaymentMethod) => void;\n}\n\nconst paymentMethods = [\n  { id: \"cash\" as const, label: \"Cash\", icon: Banknote },\n  { id: \"card\" as const, label: \"Card\", icon: CreditCard },\n  { id: \"mobile\" as const, label: \"Mobile Banking\", icon: Smartphone },\n  { id: \"due\" as const, label: \"Due\", icon: Clock },\n];\n\nexport function PaymentMethodSelector({\n  selected,\n  onSelect,\n}: PaymentMethodSelectorProps) {\n  return (\n    <div>\n      <Label className=\"mb-3 block\">Payment Method</Label>\n      <div className=\"grid grid-cols-2 gap-3\">\n        {paymentMethods.map((method) => {\n          const Icon = method.icon;\n          const isSelected = selected === method.id;\n          return (\n            <Card\n              key={method.id}\n              className={cn(\n                \"cursor-pointer transition-colors hover-elevate\",\n                isSelected && \"ring-2 ring-primary\"\n              )}\n              onClick={() => onSelect(method.id)}\n              data-testid={`payment-method-${method.id}`}\n            >\n              <CardContent className=\"flex flex-col items-center justify-center p-6 gap-2\">\n                <Icon className=\"h-6 w-6\" />\n                <span className=\"text-sm font-medium\">{method.label}</span>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1689},"client/src/components/product-form-dialog.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema, type InsertProduct, type Product, type Supplier } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ProductFormDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  product?: Product;\n  suppliers: Supplier[];\n  onSubmit: (data: InsertProduct) => Promise<void>;\n}\n\nexport function ProductFormDialog({\n  open,\n  onOpenChange,\n  product,\n  suppliers,\n  onSubmit,\n}: ProductFormDialogProps) {\n  const form = useForm<InsertProduct>({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      stockCode: \"\",\n      name: \"\",\n      category: \"\",\n      buyingPrice: \"0\",\n      sellingPrice: \"0\",\n      quantity: 0,\n      supplierId: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (product) {\n      form.reset({\n        stockCode: product.stockCode,\n        name: product.name,\n        category: product.category,\n        buyingPrice: product.buyingPrice,\n        sellingPrice: product.sellingPrice,\n        quantity: product.quantity,\n        supplierId: product.supplierId || \"\",\n      });\n    } else {\n      form.reset({\n        stockCode: \"\",\n        name: \"\",\n        category: \"\",\n        buyingPrice: \"0\",\n        sellingPrice: \"0\",\n        quantity: 0,\n        supplierId: \"\",\n      });\n    }\n  }, [product, form]);\n\n  const handleSubmit = async (data: InsertProduct) => {\n    const submissionData = {\n      ...data,\n      supplierId: data.supplierId || null,\n    };\n    await onSubmit(submissionData);\n    onOpenChange(false);\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{product ? \"Edit Product\" : \"Add New Product\"}</DialogTitle>\n          <DialogDescription>\n            {product\n              ? \"Update product information below\"\n              : \"Enter product details to add to inventory\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"stockCode\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Stock Code</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-stock-code\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Product Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-product-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-category\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"buyingPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Buying Price</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        {...field}\n                        onChange={(e) => field.onChange(e.target.value)}\n                        data-testid=\"input-buying-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"sellingPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Selling Price</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        {...field}\n                        onChange={(e) => field.onChange(e.target.value)}\n                        data-testid=\"input-selling-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"quantity\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Quantity</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                      data-testid=\"input-quantity\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"supplierId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Supplier (Optional)</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value || undefined} disabled={suppliers.length === 0}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-supplier\">\n                        <SelectValue placeholder={suppliers.length === 0 ? \"No suppliers available\" : \"Select a supplier (optional)\"} />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {suppliers.map((supplier) => (\n                        <SelectItem key={supplier.id} value={supplier.id}>\n                          {supplier.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" data-testid=\"button-submit\">\n                {product ? \"Update Product\" : \"Add Product\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7680},"client/src/components/product-table.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Edit, Trash2 } from \"lucide-react\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductTableProps {\n  products: Product[];\n  onEdit?: (product: Product) => void;\n  onDelete?: (id: string) => void;\n}\n\nexport function ProductTable({ products, onEdit, onDelete }: ProductTableProps) {\n  const getStockStatus = (quantity: number) => {\n    if (quantity === 0) return { label: \"Out of Stock\", variant: \"destructive\" as const };\n    if (quantity < 20) return { label: \"Low Stock\", variant: \"warning\" as const };\n    return { label: \"In Stock\", variant: \"success\" as const };\n  };\n\n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Stock Code</TableHead>\n            <TableHead>Product Name</TableHead>\n            <TableHead>Category</TableHead>\n            <TableHead className=\"text-right\">Quantity</TableHead>\n            <TableHead className=\"text-right\">Selling Price</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead>Supplier</TableHead>\n            <TableHead className=\"text-right\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {products.length === 0 ? (\n            <TableRow>\n              <TableCell colSpan={8} className=\"text-center text-muted-foreground\">\n                No products found\n              </TableCell>\n            </TableRow>\n          ) : (\n            products.map((product) => {\n              const status = getStockStatus(product.quantity);\n              return (\n                <TableRow key={product.id} data-testid={`row-product-${product.id}`}>\n                  <TableCell className=\"font-mono font-medium\">\n                    {product.stockCode}\n                  </TableCell>\n                  <TableCell>{product.name}</TableCell>\n                  <TableCell>{product.category}</TableCell>\n                  <TableCell className=\"text-right font-mono\">\n                    {product.quantity}\n                  </TableCell>\n                  <TableCell className=\"text-right font-mono\">\n                    ${parseFloat(product.sellingPrice).toFixed(2)}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={status.variant}>{status.label}</Badge>\n                  </TableCell>\n                  <TableCell className=\"text-muted-foreground\">\n                    {product.supplierId || \"N/A\"}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex justify-end gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => onEdit?.(product)}\n                        data-testid={`button-edit-${product.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => onDelete?.(product.id)}\n                        data-testid={`button-delete-${product.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              );\n            })\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n","size_bytes":3714},"client/src/components/receipt-preview.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { format } from \"date-fns\";\n\nexport interface ReceiptData {\n  receiptNumber: string;\n  date: Date;\n  customerName: string;\n  sellerName: string;\n  items: {\n    stockCode: string;\n    name: string;\n    quantity: number;\n    unitPrice: number;\n    subtotal: number;\n  }[];\n  subtotal: number;\n  discount: number;\n  total: number;\n  paymentMethod: string;\n}\n\ninterface ReceiptPreviewProps {\n  data: ReceiptData;\n}\n\nexport function ReceiptPreview({ data }: ReceiptPreviewProps) {\n  return (\n    <Card className=\"max-w-md mx-auto\" data-testid=\"receipt-preview\">\n      <CardContent className=\"p-8 space-y-4\">\n        <div className=\"text-center space-y-1\">\n          <h2 className=\"text-2xl font-bold\">Saga Inventory</h2>\n          <p className=\"text-sm text-muted-foreground\">Inventory Management System</p>\n        </div>\n\n        <Separator />\n\n        <div className=\"space-y-1 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Receipt #:</span>\n            <span className=\"font-mono\" data-testid=\"text-receipt-number\">\n              {data.receiptNumber}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Date:</span>\n            <span data-testid=\"text-receipt-date\">\n              {format(data.date, \"MMM dd, yyyy HH:mm\")}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Customer:</span>\n            <span data-testid=\"text-customer-name\">{data.customerName}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Seller:</span>\n            <span data-testid=\"text-seller-name\">{data.sellerName}</span>\n          </div>\n        </div>\n\n        <Separator />\n\n        <div className=\"space-y-2\">\n          <div className=\"grid grid-cols-12 gap-2 text-xs font-medium text-muted-foreground\">\n            <div className=\"col-span-4\">Item</div>\n            <div className=\"col-span-2 text-right\">Qty</div>\n            <div className=\"col-span-3 text-right\">Price</div>\n            <div className=\"col-span-3 text-right\">Total</div>\n          </div>\n          {data.items.map((item, index) => (\n            <div key={index} className=\"space-y-1\">\n              <div className=\"grid grid-cols-12 gap-2 text-sm\">\n                <div className=\"col-span-4\">\n                  <div className=\"truncate\">{item.name}</div>\n                  <div className=\"text-xs text-muted-foreground font-mono\">\n                    {item.stockCode}\n                  </div>\n                </div>\n                <div className=\"col-span-2 text-right font-mono\">{item.quantity}</div>\n                <div className=\"col-span-3 text-right font-mono\">\n                  ${item.unitPrice.toFixed(2)}\n                </div>\n                <div className=\"col-span-3 text-right font-mono font-medium\">\n                  ${item.subtotal.toFixed(2)}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <Separator />\n\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Subtotal:</span>\n            <span className=\"font-mono\">${data.subtotal.toFixed(2)}</span>\n          </div>\n          {data.discount > 0 && (\n            <div className=\"flex justify-between text-destructive\">\n              <span>Discount:</span>\n              <span className=\"font-mono\">-${data.discount.toFixed(2)}</span>\n            </div>\n          )}\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Payment Method:</span>\n            <span className=\"capitalize\">{data.paymentMethod}</span>\n          </div>\n          <Separator />\n          <div className=\"flex justify-between text-lg font-bold\">\n            <span>Total:</span>\n            <span className=\"font-mono\" data-testid=\"text-receipt-total\">\n              ${data.total.toFixed(2)}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"text-center text-xs text-muted-foreground pt-4\">\n          Thank you for your business!\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4435},"client/src/components/sales-cart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Minus, Plus, Trash2 } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport interface CartItem {\n  id: string;\n  stockCode: string;\n  name: string;\n  price: number;\n  quantity: number;\n  availableStock: number;\n}\n\ninterface SalesCartProps {\n  items: CartItem[];\n  onQuantityChange: (id: string, quantity: number) => void;\n  onRemoveItem: (id: string) => void;\n  discount: number;\n  onDiscountChange: (discount: number) => void;\n  discountType: \"percentage\" | \"fixed\";\n  onDiscountTypeChange: (type: \"percentage\" | \"fixed\") => void;\n}\n\nexport function SalesCart({\n  items,\n  onQuantityChange,\n  onRemoveItem,\n  discount,\n  onDiscountChange,\n  discountType,\n  onDiscountTypeChange,\n}: SalesCartProps) {\n  const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const discountAmount =\n    discountType === \"percentage\" ? (subtotal * discount) / 100 : discount;\n  const total = Math.max(0, subtotal - discountAmount);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Cart ({items.length} items)</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {items.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            No items in cart\n          </div>\n        ) : (\n          <>\n            <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n              {items.map((item) => (\n                <div\n                  key={item.id}\n                  className=\"flex items-start gap-3 p-3 rounded-md bg-muted/30\"\n                  data-testid={`cart-item-${item.id}`}\n                >\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-medium truncate\">{item.name}</div>\n                    <div className=\"text-xs text-muted-foreground font-mono\">\n                      {item.stockCode}\n                    </div>\n                    <div className=\"text-sm font-mono mt-1\">\n                      ${item.price.toFixed(2)} × {item.quantity}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-7 w-7\"\n                      onClick={() =>\n                        onQuantityChange(item.id, Math.max(1, item.quantity - 1))\n                      }\n                      disabled={item.quantity <= 1}\n                      data-testid={`button-decrease-${item.id}`}\n                    >\n                      <Minus className=\"h-3 w-3\" />\n                    </Button>\n                    <Input\n                      type=\"number\"\n                      value={item.quantity}\n                      onChange={(e) =>\n                        onQuantityChange(item.id, parseInt(e.target.value) || 1)\n                      }\n                      className=\"h-7 w-12 text-center\"\n                      min={1}\n                      max={item.availableStock}\n                      data-testid={`input-quantity-${item.id}`}\n                    />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-7 w-7\"\n                      onClick={() =>\n                        onQuantityChange(\n                          item.id,\n                          Math.min(item.availableStock, item.quantity + 1)\n                        )\n                      }\n                      disabled={item.quantity >= item.availableStock}\n                      data-testid={`button-increase-${item.id}`}\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-7 w-7\"\n                      onClick={() => onRemoveItem(item.id)}\n                      data-testid={`button-remove-${item.id}`}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-3\">\n              <div>\n                <Label>Discount</Label>\n                <div className=\"flex gap-2 mt-1\">\n                  <Input\n                    type=\"number\"\n                    value={discount}\n                    onChange={(e) => onDiscountChange(parseFloat(e.target.value) || 0)}\n                    placeholder=\"0\"\n                    className=\"flex-1\"\n                    data-testid=\"input-discount\"\n                  />\n                  <Button\n                    variant={discountType === \"percentage\" ? \"default\" : \"outline\"}\n                    onClick={() => onDiscountTypeChange(\"percentage\")}\n                    className=\"w-16\"\n                    data-testid=\"button-discount-percentage\"\n                  >\n                    %\n                  </Button>\n                  <Button\n                    variant={discountType === \"fixed\" ? \"default\" : \"outline\"}\n                    onClick={() => onDiscountTypeChange(\"fixed\")}\n                    className=\"w-16\"\n                    data-testid=\"button-discount-fixed\"\n                  >\n                    $\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Subtotal:</span>\n                  <span className=\"font-mono\" data-testid=\"text-subtotal\">\n                    ${subtotal.toFixed(2)}\n                  </span>\n                </div>\n                {discountAmount > 0 && (\n                  <div className=\"flex justify-between text-destructive\">\n                    <span>Discount:</span>\n                    <span className=\"font-mono\" data-testid=\"text-discount-amount\">\n                      -${discountAmount.toFixed(2)}\n                    </span>\n                  </div>\n                )}\n                <Separator />\n                <div className=\"flex justify-between text-lg font-semibold\">\n                  <span>Total:</span>\n                  <span className=\"font-mono\" data-testid=\"text-total\">\n                    ${total.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6816},"client/src/components/search-bar.tsx":{"content":"import { Input } from \"@/components/ui/input\";\nimport { Search } from \"lucide-react\";\n\ninterface SearchBarProps {\n  placeholder?: string;\n  value: string;\n  onChange: (value: string) => void;\n  testId?: string;\n}\n\nexport function SearchBar({\n  placeholder = \"Search...\",\n  value,\n  onChange,\n  testId,\n}: SearchBarProps) {\n  return (\n    <div className=\"relative\">\n      <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n      <Input\n        type=\"search\"\n        placeholder={placeholder}\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"pl-9\"\n        data-testid={testId}\n      />\n    </div>\n  );\n}\n","size_bytes":688},"client/src/components/seller-form-dialog.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertSellerSchema, type InsertSeller, type Seller } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SellerFormDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  seller?: Seller;\n  onSubmit: (data: InsertSeller) => Promise<void>;\n}\n\nexport function SellerFormDialog({\n  open,\n  onOpenChange,\n  seller,\n  onSubmit,\n}: SellerFormDialogProps) {\n  const form = useForm<InsertSeller>({\n    resolver: zodResolver(insertSellerSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (seller) {\n      form.reset({\n        name: seller.name,\n        email: seller.email,\n      });\n    } else {\n      form.reset({\n        name: \"\",\n        email: \"\",\n      });\n    }\n  }, [seller, form]);\n\n  const handleSubmit = async (data: InsertSeller) => {\n    await onSubmit(data);\n    onOpenChange(false);\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>{seller ? \"Edit Seller\" : \"Add New Seller\"}</DialogTitle>\n          <DialogDescription>\n            {seller\n              ? \"Update seller information below\"\n              : \"Enter seller details to add to database\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-seller-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input type=\"email\" {...field} data-testid=\"input-seller-email\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" data-testid=\"button-submit\">\n                {seller ? \"Update Seller\" : \"Add Seller\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3299},"client/src/components/stat-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { TrendingUp, TrendingDown } from \"lucide-react\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  change?: number;\n  icon: LucideIcon;\n  testId?: string;\n}\n\nexport function StatCard({ title, value, change, icon: Icon, testId }: StatCardProps) {\n  const isPositive = change && change > 0;\n  const isNegative = change && change < 0;\n\n  return (\n    <Card data-testid={testId}>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <div className=\"text-sm font-medium text-muted-foreground\">{title}</div>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold font-mono\" data-testid={`${testId}-value`}>\n          {value}\n        </div>\n        {change !== undefined && (\n          <div className=\"flex items-center gap-1 text-xs mt-1\">\n            {isPositive && (\n              <>\n                <TrendingUp className=\"h-3 w-3 text-success\" />\n                <span className=\"text-success\">+{change}%</span>\n              </>\n            )}\n            {isNegative && (\n              <>\n                <TrendingDown className=\"h-3 w-3 text-destructive\" />\n                <span className=\"text-destructive\">{change}%</span>\n              </>\n            )}\n            {!isPositive && !isNegative && (\n              <span className=\"text-muted-foreground\">No change</span>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1638},"client/src/components/supplier-form-dialog.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertSupplierSchema, type InsertSupplier, type Supplier } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SupplierFormDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  supplier?: Supplier;\n  onSubmit: (data: InsertSupplier) => Promise<void>;\n}\n\nexport function SupplierFormDialog({\n  open,\n  onOpenChange,\n  supplier,\n  onSubmit,\n}: SupplierFormDialogProps) {\n  const form = useForm<InsertSupplier>({\n    resolver: zodResolver(insertSupplierSchema),\n    defaultValues: {\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (supplier) {\n      form.reset({\n        name: supplier.name,\n        phone: supplier.phone,\n        email: supplier.email,\n      });\n    } else {\n      form.reset({\n        name: \"\",\n        phone: \"\",\n        email: \"\",\n      });\n    }\n  }, [supplier, form]);\n\n  const handleSubmit = async (data: InsertSupplier) => {\n    await onSubmit(data);\n    onOpenChange(false);\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>{supplier ? \"Edit Supplier\" : \"Add New Supplier\"}</DialogTitle>\n          <DialogDescription>\n            {supplier\n              ? \"Update supplier information below\"\n              : \"Enter supplier details to add to database\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-supplier-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Phone</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-supplier-phone\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input type=\"email\" {...field} data-testid=\"input-supplier-email\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" data-testid=\"button-submit\">\n                {supplier ? \"Update Supplier\" : \"Add Supplier\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3858},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"saga-inventory-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1608},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":676},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/export.ts":{"content":"// Export utilities for CSV and data export\n\nexport function exportToCSV<T extends Record<string, any>>(\n  data: T[],\n  filename: string,\n  columns?: { key: keyof T; label: string }[]\n) {\n  if (data.length === 0) return;\n\n  // If columns not provided, use all keys from first object\n  const cols = columns || Object.keys(data[0]).map((key) => ({ key, label: key }));\n\n  // Create CSV header\n  const header = cols.map((col) => col.label).join(\",\");\n\n  // Create CSV rows\n  const rows = data.map((row) =>\n    cols\n      .map((col) => {\n        const value = row[col.key];\n        // Escape quotes and wrap in quotes if contains comma\n        const stringValue = String(value ?? \"\");\n        return stringValue.includes(\",\") || stringValue.includes('\"')\n          ? `\"${stringValue.replace(/\"/g, '\"\"')}\"`\n          : stringValue;\n      })\n      .join(\",\")\n  );\n\n  // Combine header and rows\n  const csv = [header, ...rows].join(\"\\n\");\n\n  // Create blob and download\n  const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n  const link = document.createElement(\"a\");\n  const url = URL.createObjectURL(blob);\n\n  link.setAttribute(\"href\", url);\n  link.setAttribute(\"download\", `${filename}.csv`);\n  link.style.visibility = \"hidden\";\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\nexport function formatCurrency(value: number | string): string {\n  const num = typeof value === \"string\" ? parseFloat(value) : value;\n  return `$${num.toFixed(2)}`;\n}\n\nexport function formatDate(date: Date | string): string {\n  const d = typeof date === \"string\" ? new Date(date) : date;\n  return d.toLocaleDateString();\n}\n\nexport function formatDateTime(date: Date | string): string {\n  const d = typeof date === \"string\" ? new Date(date) : date;\n  return d.toLocaleString();\n}\n","size_bytes":1808},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { CustomerList, Customer } from \"@/components/customer-list\";\nimport { CustomerFormDialog } from \"@/components/customer-form-dialog\";\nimport { DeleteConfirmDialog } from \"@/components/delete-confirm-dialog\";\nimport { SearchBar } from \"@/components/search-bar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Download } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { exportToCSV } from \"@/lib/export\";\nimport type { InsertCustomer } from \"@shared/schema\";\n\ntype CustomerWithStats = Customer & { totalPurchases: number; totalSpent: number };\n\nexport default function Customers() {\n  const [search, setSearch] = useState(\"\");\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  const [deletingCustomer, setDeletingCustomer] = useState<string | null>(null);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: customers = [], isLoading } = useQuery<CustomerWithStats[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertCustomer) =>\n      apiRequest(\"POST\", \"/api/customers\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({ title: \"Customer created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create customer\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertCustomer> }) =>\n      apiRequest(\"PATCH\", `/api/customers/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({ title: \"Customer updated successfully\" });\n      setEditingCustomer(null);\n    },\n    onError: () => {\n      toast({ title: \"Failed to update customer\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(\"DELETE\", `/api/customers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({ title: \"Customer deleted successfully\" });\n      setDeletingCustomer(null);\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete customer\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = async (data: InsertCustomer) => {\n    if (editingCustomer) {\n      await updateMutation.mutateAsync({ id: editingCustomer.id, data });\n    } else {\n      await createMutation.mutateAsync(data);\n    }\n  };\n\n  const handleViewDetails = (customer: Customer) => {\n    setEditingCustomer(customer);\n    setIsFormOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    setDeletingCustomer(id);\n  };\n\n  const confirmDelete = () => {\n    if (deletingCustomer) {\n      deleteMutation.mutate(deletingCustomer);\n    }\n  };\n\n  const handleExport = () => {\n    exportToCSV(\n      customers,\n      \"customers\",\n      [\n        { key: \"name\", label: \"Name\" },\n        { key: \"phone\", label: \"Phone\" },\n        { key: \"email\", label: \"Email\" },\n        { key: \"totalPurchases\", label: \"Total Purchases\" },\n        { key: \"totalSpent\", label: \"Total Spent\" },\n      ]\n    );\n    toast({ title: \"Customers exported successfully\" });\n  };\n\n  const filteredCustomers = customers.filter(\n    (customer) =>\n      customer.name.toLowerCase().includes(search.toLowerCase()) ||\n      customer.email.toLowerCase().includes(search.toLowerCase()) ||\n      customer.phone.includes(search)\n  );\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-full\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Customers</h1>\n          <p className=\"text-muted-foreground\">Manage your customer database</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handleExport} data-testid=\"button-export-customers\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export CSV\n          </Button>\n          <Button onClick={() => setIsFormOpen(true)} data-testid=\"button-add-customer\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add Customer\n          </Button>\n        </div>\n      </div>\n\n      <SearchBar\n        placeholder=\"Search by name, email, or phone...\"\n        value={search}\n        onChange={setSearch}\n        testId=\"input-search-customers\"\n      />\n\n      <CustomerList\n        customers={filteredCustomers}\n        onViewDetails={handleViewDetails}\n      />\n\n      <CustomerFormDialog\n        open={isFormOpen}\n        onOpenChange={(open) => {\n          setIsFormOpen(open);\n          if (!open) setEditingCustomer(null);\n        }}\n        customer={editingCustomer || undefined}\n        onSubmit={handleSubmit}\n      />\n\n      <DeleteConfirmDialog\n        open={!!deletingCustomer}\n        onOpenChange={(open) => !open && setDeletingCustomer(null)}\n        onConfirm={confirmDelete}\n        title=\"Delete Customer\"\n        description=\"Are you sure you want to delete this customer? This action cannot be undone.\"\n      />\n    </div>\n  );\n}\n","size_bytes":5395},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { StatCard } from \"@/components/stat-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Package, DollarSign, AlertTriangle, TrendingUp, ArrowRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport type { Product } from \"@shared/schema\";\n\ninterface DashboardStats {\n  totalProducts: number;\n  todaysSales: number;\n  lowStockCount: number;\n  todaysProfit: number;\n}\n\ninterface RecentSale {\n  id: string;\n  receiptNumber: string;\n  customerName: string;\n  total: string;\n  createdAt: string;\n}\n\nexport default function Dashboard() {\n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: lowStockProducts = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/dashboard/low-stock\"],\n  });\n\n  const { data: recentSales = [] } = useQuery<RecentSale[]>({\n    queryKey: [\"/api/sales/recent\"],\n  });\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return \"Just now\";\n    if (diffInMinutes < 60) return `${diffInMinutes} mins ago`;\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;\n    return `${Math.floor(diffInHours / 24)} day${Math.floor(diffInHours / 24) > 1 ? 's' : ''} ago`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Dashboard</h1>\n        <p className=\"text-muted-foreground\">Overview of your inventory and sales</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Total Products\"\n          value={stats?.totalProducts ?? 0}\n          change={12}\n          icon={Package}\n          testId=\"card-total-products\"\n        />\n        <StatCard\n          title=\"Today's Sales\"\n          value={`$${(stats?.todaysSales ?? 0).toFixed(2)}`}\n          change={8.2}\n          icon={DollarSign}\n          testId=\"card-todays-sales\"\n        />\n        <StatCard\n          title=\"Low Stock Alerts\"\n          value={stats?.lowStockCount ?? 0}\n          change={-15}\n          icon={AlertTriangle}\n          testId=\"card-low-stock\"\n        />\n        <StatCard\n          title=\"Profit Today\"\n          value={`$${(stats?.todaysProfit ?? 0).toFixed(2)}`}\n          change={5.4}\n          icon={TrendingUp}\n          testId=\"card-profit\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0\">\n            <CardTitle>Low Stock Alerts</CardTitle>\n            <Link href=\"/products\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-products\">\n                View All\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </Link>\n          </CardHeader>\n          <CardContent>\n            {lowStockProducts.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No low stock items\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {lowStockProducts.slice(0, 5).map((product) => (\n                  <div\n                    key={product.id}\n                    className=\"flex items-center justify-between p-3 rounded-md bg-muted/30\"\n                    data-testid={`low-stock-item-${product.id}`}\n                  >\n                    <div>\n                      <div className=\"font-medium\">{product.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        <span className=\"font-mono\">{product.stockCode}</span> • {product.category}\n                      </div>\n                    </div>\n                    <Badge\n                      variant={product.quantity === 0 ? \"destructive\" : \"warning\"}\n                      data-testid={`badge-stock-${product.id}`}\n                    >\n                      {product.quantity === 0 ? \"Out of Stock\" : `${product.quantity} left`}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0\">\n            <CardTitle>Recent Sales</CardTitle>\n            <Link href=\"/sales\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-sales\">\n                View All\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </Link>\n          </CardHeader>\n          <CardContent>\n            {recentSales.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No recent sales\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {recentSales.map((sale) => (\n                  <div\n                    key={sale.id}\n                    className=\"flex items-center justify-between p-3 rounded-md bg-muted/30\"\n                    data-testid={`recent-sale-${sale.id}`}\n                  >\n                    <div>\n                      <div className=\"font-medium\">{sale.customerName}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        <span className=\"font-mono\">{sale.receiptNumber}</span> • {formatTimeAgo(sale.createdAt)}\n                      </div>\n                    </div>\n                    <div className=\"font-mono font-semibold\">\n                      ${parseFloat(sale.total).toFixed(2)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6154},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { ProductTable } from \"@/components/product-table\";\nimport { ProductFormDialog } from \"@/components/product-form-dialog\";\nimport { DeleteConfirmDialog } from \"@/components/delete-confirm-dialog\";\nimport { SearchBar } from \"@/components/search-bar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Download } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { exportToCSV } from \"@/lib/export\";\nimport type { InsertProduct, Supplier, Product } from \"@shared/schema\";\n\nexport default function Products() {\n  const [search, setSearch] = useState(\"\");\n  const [category, setCategory] = useState(\"all\");\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [deletingProduct, setDeletingProduct] = useState<string | null>(null);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: suppliers = [] } = useQuery<Supplier[]>({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertProduct) =>\n      apiRequest(\"POST\", \"/api/products\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Product created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create product\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertProduct> }) =>\n      apiRequest(\"PATCH\", `/api/products/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Product updated successfully\" });\n      setEditingProduct(null);\n    },\n    onError: () => {\n      toast({ title: \"Failed to update product\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(\"DELETE\", `/api/products/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Product deleted successfully\" });\n      setDeletingProduct(null);\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete product\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = async (data: InsertProduct) => {\n    if (editingProduct) {\n      await updateMutation.mutateAsync({ id: editingProduct.id, data });\n    } else {\n      await createMutation.mutateAsync(data);\n    }\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    setIsFormOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    setDeletingProduct(id);\n  };\n\n  const confirmDelete = () => {\n    if (deletingProduct) {\n      deleteMutation.mutate(deletingProduct);\n    }\n  };\n\n  const handleExport = () => {\n    exportToCSV(\n      products.map(p => ({\n        stockCode: p.stockCode,\n        name: p.name,\n        category: p.category,\n        buyingPrice: p.buyingPrice,\n        sellingPrice: p.sellingPrice,\n        quantity: p.quantity,\n      })),\n      \"products\",\n      [\n        { key: \"stockCode\", label: \"Stock Code\" },\n        { key: \"name\", label: \"Product Name\" },\n        { key: \"category\", label: \"Category\" },\n        { key: \"buyingPrice\", label: \"Buying Price\" },\n        { key: \"sellingPrice\", label: \"Selling Price\" },\n        { key: \"quantity\", label: \"Quantity\" },\n      ]\n    );\n    toast({ title: \"Products exported successfully\" });\n  };\n\n  const filteredProducts = products.filter((product) => {\n    const matchesSearch =\n      product.name.toLowerCase().includes(search.toLowerCase()) ||\n      product.stockCode.toLowerCase().includes(search.toLowerCase());\n    const matchesCategory = category === \"all\" || product.category === category;\n    return matchesSearch && matchesCategory;\n  });\n\n  const categories = [\"all\", ...Array.from(new Set(products.map(p => p.category)))];\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-full\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Products</h1>\n          <p className=\"text-muted-foreground\">Manage your product inventory</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handleExport} data-testid=\"button-export-products\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export CSV\n          </Button>\n          <Button onClick={() => setIsFormOpen(true)} data-testid=\"button-add-product\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add Product\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <div className=\"flex-1\">\n          <SearchBar\n            placeholder=\"Search by name or stock code...\"\n            value={search}\n            onChange={setSearch}\n            testId=\"input-search-products\"\n          />\n        </div>\n        <Select value={category} onValueChange={setCategory}>\n          <SelectTrigger className=\"w-48\" data-testid=\"select-category\">\n            <SelectValue placeholder=\"Category\" />\n          </SelectTrigger>\n          <SelectContent>\n            {categories.map((cat) => (\n              <SelectItem key={cat} value={cat}>\n                {cat === \"all\" ? \"All Categories\" : cat}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <ProductTable\n        products={filteredProducts}\n        onEdit={handleEdit}\n        onDelete={handleDelete}\n      />\n\n      <ProductFormDialog\n        open={isFormOpen}\n        onOpenChange={(open) => {\n          setIsFormOpen(open);\n          if (!open) setEditingProduct(null);\n        }}\n        product={editingProduct || undefined}\n        suppliers={suppliers}\n        onSubmit={handleSubmit}\n      />\n\n      <DeleteConfirmDialog\n        open={!!deletingProduct}\n        onOpenChange={(open) => !open && setDeletingProduct(null)}\n        onConfirm={confirmDelete}\n        title=\"Delete Product\"\n        description=\"Are you sure you want to delete this product? This action cannot be undone.\"\n      />\n    </div>\n  );\n}\n","size_bytes":6624},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, Calendar } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport default function Reports() {\n  const [period, setPeriod] = useState(\"today\");\n\n  const stockData = [\n    { category: \"Electronics\", products: 45, value: 12450.50, status: \"healthy\" },\n    { category: \"Stationery\", products: 28, value: 2890.75, status: \"low\" },\n    { category: \"Clothes\", products: 65, value: 18760.00, status: \"healthy\" },\n  ];\n\n  const salesData = [\n    { date: \"Today\", transactions: 32, revenue: 4320.00, profit: 1840.50 },\n    { date: \"Yesterday\", transactions: 28, revenue: 3980.00, profit: 1650.25 },\n    { date: \"This Week\", transactions: 198, revenue: 28450.00, profit: 12180.75 },\n    { date: \"This Month\", transactions: 845, revenue: 124350.00, profit: 52840.00 },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Reports & Analytics</h1>\n          <p className=\"text-muted-foreground\">\n            Comprehensive insights into your business\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={period} onValueChange={setPeriod}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-period\">\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"today\">Today</SelectItem>\n              <SelectItem value=\"week\">This Week</SelectItem>\n              <SelectItem value=\"month\">This Month</SelectItem>\n              <SelectItem value=\"year\">This Year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" data-testid=\"button-export\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"stock\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"stock\" data-testid=\"tab-stock\">\n            Stock Report\n          </TabsTrigger>\n          <TabsTrigger value=\"sales\" data-testid=\"tab-sales\">\n            Sales Report\n          </TabsTrigger>\n          <TabsTrigger value=\"profit\" data-testid=\"tab-profit\">\n            Profit Report\n          </TabsTrigger>\n          <TabsTrigger value=\"customers\" data-testid=\"tab-customers\">\n            Customer Report\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"stock\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Stock Overview by Category</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {stockData.map((item) => (\n                  <div\n                    key={item.category}\n                    className=\"flex items-center justify-between p-4 rounded-md border\"\n                  >\n                    <div>\n                      <div className=\"font-semibold\">{item.category}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {item.products} products\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-mono font-semibold\">\n                        ${item.value.toFixed(2)}\n                      </div>\n                      <div\n                        className={`text-sm ${\n                          item.status === \"healthy\"\n                            ? \"text-success\"\n                            : \"text-warning\"\n                        }`}\n                      >\n                        {item.status === \"healthy\" ? \"Healthy\" : \"Low Stock\"}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"sales\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Sales Performance</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {salesData.map((item) => (\n                  <div\n                    key={item.date}\n                    className=\"flex items-center justify-between p-4 rounded-md border\"\n                  >\n                    <div>\n                      <div className=\"font-semibold\">{item.date}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {item.transactions} transactions\n                      </div>\n                    </div>\n                    <div className=\"text-right space-y-1\">\n                      <div className=\"font-mono font-semibold\">\n                        ${item.revenue.toFixed(2)}\n                      </div>\n                      <div className=\"text-sm text-success\">\n                        Profit: ${item.profit.toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"profit\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Today's Profit</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold font-mono text-success\">\n                  $1,840.50\n                </div>\n                <div className=\"text-sm text-muted-foreground mt-1\">\n                  From 32 transactions\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Weekly Profit</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold font-mono text-success\">\n                  $12,180.75\n                </div>\n                <div className=\"text-sm text-muted-foreground mt-1\">\n                  From 198 transactions\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Monthly Profit</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold font-mono text-success\">\n                  $52,840.00\n                </div>\n                <div className=\"text-sm text-muted-foreground mt-1\">\n                  From 845 transactions\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"customers\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Top Customers by Revenue</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  { name: \"Michael Brown\", purchases: 22, spent: 4320.00 },\n                  { name: \"John Smith\", purchases: 15, spent: 2450.75 },\n                  { name: \"Sarah Davis\", purchases: 12, spent: 1680.25 },\n                  { name: \"Emma Wilson\", purchases: 8, spent: 890.50 },\n                ].map((customer, index) => (\n                  <div\n                    key={customer.name}\n                    className=\"flex items-center justify-between p-4 rounded-md border\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-primary text-primary-foreground font-semibold text-sm\">\n                        {index + 1}\n                      </div>\n                      <div>\n                        <div className=\"font-semibold\">{customer.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {customer.purchases} purchases\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"font-mono font-semibold\">\n                      ${customer.spent.toFixed(2)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":8827},"client/src/pages/sales.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { SearchBar } from \"@/components/search-bar\";\nimport { SalesCart, CartItem } from \"@/components/sales-cart\";\nimport { PaymentMethodSelector, PaymentMethod } from \"@/components/payment-method-selector\";\nimport { Invoice } from \"@/components/invoice\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { ShoppingCart } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Product, Customer, Seller, InsertSale, Sale, SaleItem } from \"@shared/schema\";\n\nexport default function Sales() {\n  const [search, setSearch] = useState(\"\");\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [discount, setDiscount] = useState(0);\n  const [discountType, setDiscountType] = useState<\"percentage\" | \"fixed\">(\"percentage\");\n  const [paymentMethod, setPaymentMethod] = useState<PaymentMethod>(\"cash\");\n  const [customer, setCustomer] = useState(\"\");\n  const [seller, setSeller] = useState(\"\");\n  const [showInvoice, setShowInvoice] = useState(false);\n  const [completedSale, setCompletedSale] = useState<{sale: Sale, items: SaleItem[], customerData: Customer, sellerData: Seller} | null>(null);\n  const { toast } = useToast();\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: sellers = [] } = useQuery<Seller[]>({\n    queryKey: [\"/api/sellers\"],\n  });\n\n  const createSaleMutation = useMutation({\n    mutationFn: (data: InsertSale) =>\n      apiRequest(\"POST\", \"/api/sales\", data),\n    onSuccess: async (response) => {\n      const result = await response.json();\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      const customerData = customers.find(c => c.id === customer)!;\n      const sellerData = sellers.find(s => s.id === seller)!;\n      setCompletedSale({ ...result, customerData, sellerData });\n      setShowInvoice(true);\n      \n      // Reset form\n      setCartItems([]);\n      setDiscount(0);\n      setCustomer(\"\");\n      setSeller(\"\");\n      \n      toast({ title: \"Sale completed successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to complete sale\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredProducts = products.filter(\n    (product) =>\n      product.quantity > 0 &&\n      (product.name.toLowerCase().includes(search.toLowerCase()) ||\n      product.stockCode.toLowerCase().includes(search.toLowerCase()))\n  );\n\n  const addToCart = (product: Product) => {\n    const existing = cartItems.find((item) => item.id === product.id);\n    if (existing) {\n      if (existing.quantity < product.quantity) {\n        setCartItems((prev) =>\n          prev.map((item) =>\n            item.id === product.id\n              ? { ...item, quantity: item.quantity + 1 }\n              : item\n          )\n        );\n      }\n    } else {\n      setCartItems((prev) => [\n        ...prev,\n        {\n          id: product.id,\n          stockCode: product.stockCode,\n          name: product.name,\n          price: parseFloat(product.sellingPrice),\n          quantity: 1,\n          availableStock: product.quantity,\n        },\n      ]);\n    }\n  };\n\n  const handleQuantityChange = (id: string, quantity: number) => {\n    setCartItems((prev) =>\n      prev.map((item) => (item.id === id ? { ...item, quantity } : item))\n    );\n  };\n\n  const handleRemoveItem = (id: string) => {\n    setCartItems((prev) => prev.filter((item) => item.id !== id));\n  };\n\n  const handleCompleteSale = async () => {\n    const subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n    const discountAmount = discountType === \"percentage\" ? (subtotal * discount) / 100 : discount;\n    const total = Math.max(0, subtotal - discountAmount);\n\n    const saleData: InsertSale = {\n      customerId: customer,\n      sellerId: seller,\n      subtotal: subtotal.toString(),\n      discount: discount.toString(),\n      discountType,\n      total: total.toString(),\n      paymentMethod,\n      items: cartItems.map(item => {\n        const product = products.find(p => p.id === item.id)!;\n        return {\n          productId: item.id,\n          productName: item.name,\n          stockCode: item.stockCode,\n          quantity: item.quantity,\n          unitPrice: item.price.toString(),\n          buyingPrice: product.buyingPrice,\n          subtotal: (item.price * item.quantity).toString(),\n        };\n      }),\n    };\n\n    await createSaleMutation.mutateAsync(saleData);\n  };\n\n  const canCompleteSale = cartItems.length > 0 && customer && seller;\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">New Sale</h1>\n        <p className=\"text-muted-foreground\">Create a new sales transaction</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Product Selection</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <SearchBar\n                placeholder=\"Search products...\"\n                value={search}\n                onChange={setSearch}\n                testId=\"input-search-sale-products\"\n              />\n\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {filteredProducts.map((product) => (\n                  <div\n                    key={product.id}\n                    className=\"flex items-center justify-between p-3 rounded-md border hover-elevate active-elevate-2 cursor-pointer\"\n                    onClick={() => addToCart(product)}\n                    data-testid={`product-item-${product.id}`}\n                  >\n                    <div>\n                      <div className=\"font-medium\">{product.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        <span className=\"font-mono\">{product.stockCode}</span> • {product.category}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant={product.quantity < 20 ? \"warning\" : \"success\"}>\n                        Stock: {product.quantity}\n                      </Badge>\n                      <div className=\"font-mono font-semibold\">\n                        ${parseFloat(product.sellingPrice).toFixed(2)}\n                      </div>\n                      <Button size=\"sm\" data-testid={`button-add-${product.id}`}>\n                        <ShoppingCart className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"space-y-6\">\n          <SalesCart\n            items={cartItems}\n            onQuantityChange={handleQuantityChange}\n            onRemoveItem={handleRemoveItem}\n            discount={discount}\n            onDiscountChange={setDiscount}\n            discountType={discountType}\n            onDiscountTypeChange={setDiscountType}\n          />\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Transaction Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label>Customer</Label>\n                <Select value={customer} onValueChange={setCustomer}>\n                  <SelectTrigger data-testid=\"select-customer\">\n                    <SelectValue placeholder=\"Select customer\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {customers.map((c) => (\n                      <SelectItem key={c.id} value={c.id}>\n                        {c.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Seller</Label>\n                <Select value={seller} onValueChange={setSeller}>\n                  <SelectTrigger data-testid=\"select-seller\">\n                    <SelectValue placeholder=\"Select seller\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {sellers.map((s) => (\n                      <SelectItem key={s.id} value={s.id}>\n                        {s.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <PaymentMethodSelector\n                selected={paymentMethod}\n                onSelect={setPaymentMethod}\n              />\n\n              <Button\n                className=\"w-full\"\n                size=\"lg\"\n                disabled={!canCompleteSale}\n                onClick={handleCompleteSale}\n                data-testid=\"button-complete-sale\"\n              >\n                Complete Sale & Generate Invoice\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Dialog open={showInvoice} onOpenChange={setShowInvoice}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Sale Invoice</DialogTitle>\n          </DialogHeader>\n          {completedSale && (\n            <Invoice\n              data={{\n                invoiceNumber: completedSale.sale.receiptNumber,\n                date: new Date(completedSale.sale.createdAt),\n                customerName: completedSale.customerData.name,\n                customerEmail: completedSale.customerData.email,\n                customerPhone: completedSale.customerData.phone,\n                sellerName: completedSale.sellerData.name,\n                items: completedSale.items.map(item => ({\n                  stockCode: item.stockCode,\n                  name: item.productName,\n                  quantity: item.quantity,\n                  unitPrice: parseFloat(item.unitPrice),\n                  subtotal: parseFloat(item.subtotal),\n                })),\n                subtotal: parseFloat(completedSale.sale.subtotal),\n                discount: parseFloat(completedSale.sale.discount),\n                discountType: completedSale.sale.discountType,\n                total: parseFloat(completedSale.sale.total),\n                paymentMethod: completedSale.sale.paymentMethod,\n              }}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":11191},"client/src/pages/sellers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { SellerFormDialog } from \"@/components/seller-form-dialog\";\nimport { DeleteConfirmDialog } from \"@/components/delete-confirm-dialog\";\nimport { SearchBar } from \"@/components/search-bar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, DollarSign, ShoppingCart, Download, Edit, Trash2 } from \"lucide-react\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { exportToCSV } from \"@/lib/export\";\nimport type { Seller, InsertSeller } from \"@shared/schema\";\n\ntype SellerWithStats = Seller & { totalSales: number; totalRevenue: number };\n\nexport default function Sellers() {\n  const [search, setSearch] = useState(\"\");\n  const [editingSeller, setEditingSeller] = useState<Seller | null>(null);\n  const [deletingSeller, setDeletingSeller] = useState<string | null>(null);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: sellers = [], isLoading } = useQuery<SellerWithStats[]>({\n    queryKey: [\"/api/sellers\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertSeller) =>\n      apiRequest(\"POST\", \"/api/sellers\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sellers\"] });\n      toast({ title: \"Seller created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create seller\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertSeller> }) =>\n      apiRequest(\"PATCH\", `/api/sellers/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sellers\"] });\n      toast({ title: \"Seller updated successfully\" });\n      setEditingSeller(null);\n    },\n    onError: () => {\n      toast({ title: \"Failed to update seller\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(\"DELETE\", `/api/sellers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sellers\"] });\n      toast({ title: \"Seller deleted successfully\" });\n      setDeletingSeller(null);\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete seller\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = async (data: InsertSeller) => {\n    if (editingSeller) {\n      await updateMutation.mutateAsync({ id: editingSeller.id, data });\n    } else {\n      await createMutation.mutateAsync(data);\n    }\n  };\n\n  const confirmDelete = () => {\n    if (deletingSeller) {\n      deleteMutation.mutate(deletingSeller);\n    }\n  };\n\n  const handleExport = () => {\n    exportToCSV(\n      sellers,\n      \"sellers\",\n      [\n        { key: \"name\", label: \"Name\" },\n        { key: \"email\", label: \"Email\" },\n        { key: \"totalSales\", label: \"Total Sales\" },\n        { key: \"totalRevenue\", label: \"Total Revenue\" },\n      ]\n    );\n    toast({ title: \"Sellers exported successfully\" });\n  };\n\n  const filteredSellers = sellers.filter(\n    (seller) =>\n      seller.name.toLowerCase().includes(search.toLowerCase()) ||\n      seller.email.toLowerCase().includes(search.toLowerCase())\n  );\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-full\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Sellers</h1>\n          <p className=\"text-muted-foreground\">Track seller performance and sales</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handleExport} data-testid=\"button-export-sellers\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export CSV\n          </Button>\n          <Button onClick={() => setIsFormOpen(true)} data-testid=\"button-add-seller\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add Seller\n          </Button>\n        </div>\n      </div>\n\n      <SearchBar\n        placeholder=\"Search by name or email...\"\n        value={search}\n        onChange={setSearch}\n        testId=\"input-search-sellers\"\n      />\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {filteredSellers.length === 0 ? (\n          <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n            No sellers found\n          </div>\n        ) : (\n          filteredSellers.map((seller) => {\n            const performance = seller.totalRevenue > 0 ? Math.min(95 + Math.random() * 5, 100) : 0;\n            return (\n              <Card\n                key={seller.id}\n                className=\"hover-elevate\"\n                data-testid={`card-seller-${seller.id}`}\n              >\n                <CardHeader className=\"flex flex-row items-center gap-4 space-y-0\">\n                  <Avatar>\n                    <AvatarFallback>{getInitials(seller.name)}</AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 min-w-0\">\n                    <CardTitle className=\"text-lg truncate\">{seller.name}</CardTitle>\n                    <p className=\"text-sm text-muted-foreground truncate\">{seller.email}</p>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => {\n                        setEditingSeller(seller);\n                        setIsFormOpen(true);\n                      }}\n                      data-testid={`button-edit-seller-${seller.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => setDeletingSeller(seller.id)}\n                      data-testid={`button-delete-seller-${seller.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-1 text-muted-foreground text-xs\">\n                        <ShoppingCart className=\"h-3 w-3\" />\n                        <span>Total Sales</span>\n                      </div>\n                      <div className=\"text-xl font-bold font-mono\">\n                        {seller.totalSales}\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-1 text-muted-foreground text-xs\">\n                        <DollarSign className=\"h-3 w-3\" />\n                        <span>Revenue</span>\n                      </div>\n                      <div className=\"text-xl font-bold font-mono\">\n                        ${(seller.totalRevenue / 1000).toFixed(1)}k\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Performance</span>\n                      <span className=\"font-semibold\">{performance.toFixed(0)}%</span>\n                    </div>\n                    <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                      <div\n                        className=\"h-full bg-success\"\n                        style={{ width: `${performance}%` }}\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n\n      <SellerFormDialog\n        open={isFormOpen}\n        onOpenChange={(open) => {\n          setIsFormOpen(open);\n          if (!open) setEditingSeller(null);\n        }}\n        seller={editingSeller || undefined}\n        onSubmit={handleSubmit}\n      />\n\n      <DeleteConfirmDialog\n        open={!!deletingSeller}\n        onOpenChange={(open) => !open && setDeletingSeller(null)}\n        onConfirm={confirmDelete}\n        title=\"Delete Seller\"\n        description=\"Are you sure you want to delete this seller? This action cannot be undone.\"\n      />\n    </div>\n  );\n}\n","size_bytes":8879},"client/src/pages/settings.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\n\nexport default function Settings() {\n  return (\n    <div className=\"space-y-6 max-w-3xl\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Settings</h1>\n        <p className=\"text-muted-foreground\">Manage your application preferences</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Business Information</CardTitle>\n          <CardDescription>\n            Update your business details and contact information\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"business-name\">Business Name</Label>\n            <Input\n              id=\"business-name\"\n              defaultValue=\"Saga Inventory\"\n              data-testid=\"input-business-name\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"business-email\">Email</Label>\n            <Input\n              id=\"business-email\"\n              type=\"email\"\n              defaultValue=\"contact@saga-inventory.com\"\n              data-testid=\"input-business-email\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"business-phone\">Phone</Label>\n            <Input\n              id=\"business-phone\"\n              defaultValue=\"+1 234 567 8900\"\n              data-testid=\"input-business-phone\"\n            />\n          </div>\n          <Button data-testid=\"button-save-business\">Save Changes</Button>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Appearance</CardTitle>\n          <CardDescription>\n            Customize how Saga Inventory looks on your device\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label>Theme</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Toggle between light and dark mode\n              </p>\n            </div>\n            <ThemeToggle />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Low Stock Alert</CardTitle>\n          <CardDescription>\n            Set the threshold for low stock notifications\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"low-stock-threshold\">Threshold Quantity</Label>\n            <Input\n              id=\"low-stock-threshold\"\n              type=\"number\"\n              defaultValue=\"20\"\n              data-testid=\"input-low-stock-threshold\"\n            />\n            <p className=\"text-sm text-muted-foreground\">\n              You'll be alerted when product quantity falls below this number\n            </p>\n          </div>\n          <Button data-testid=\"button-save-threshold\">Save Threshold</Button>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Receipt Settings</CardTitle>\n          <CardDescription>\n            Configure receipt printing and format options\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"receipt-footer\">Receipt Footer Message</Label>\n            <Input\n              id=\"receipt-footer\"\n              defaultValue=\"Thank you for your business!\"\n              data-testid=\"input-receipt-footer\"\n            />\n          </div>\n          <Button data-testid=\"button-save-receipt\">Save Settings</Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4029},"client/src/pages/suppliers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { SupplierFormDialog } from \"@/components/supplier-form-dialog\";\nimport { DeleteConfirmDialog } from \"@/components/delete-confirm-dialog\";\nimport { SearchBar } from \"@/components/search-bar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Mail, Phone, Package, Download, Edit, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { exportToCSV } from \"@/lib/export\";\nimport type { Supplier, InsertSupplier } from \"@shared/schema\";\n\nexport default function Suppliers() {\n  const [search, setSearch] = useState(\"\");\n  const [editingSupplier, setEditingSupplier] = useState<Supplier | null>(null);\n  const [deletingSupplier, setDeletingSupplier] = useState<string | null>(null);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: suppliers = [], isLoading } = useQuery<Supplier[]>({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertSupplier) =>\n      apiRequest(\"POST\", \"/api/suppliers\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      toast({ title: \"Supplier created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create supplier\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertSupplier> }) =>\n      apiRequest(\"PATCH\", `/api/suppliers/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      toast({ title: \"Supplier updated successfully\" });\n      setEditingSupplier(null);\n    },\n    onError: () => {\n      toast({ title: \"Failed to update supplier\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(\"DELETE\", `/api/suppliers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      toast({ title: \"Supplier deleted successfully\" });\n      setDeletingSupplier(null);\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete supplier\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = async (data: InsertSupplier) => {\n    if (editingSupplier) {\n      await updateMutation.mutateAsync({ id: editingSupplier.id, data });\n    } else {\n      await createMutation.mutateAsync(data);\n    }\n  };\n\n  const handleEdit = (supplier: Supplier) => {\n    setEditingSupplier(supplier);\n    setIsFormOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (deletingSupplier) {\n      deleteMutation.mutate(deletingSupplier);\n    }\n  };\n\n  const handleExport = () => {\n    exportToCSV(\n      suppliers,\n      \"suppliers\",\n      [\n        { key: \"name\", label: \"Name\" },\n        { key: \"phone\", label: \"Phone\" },\n        { key: \"email\", label: \"Email\" },\n      ]\n    );\n    toast({ title: \"Suppliers exported successfully\" });\n  };\n\n  const filteredSuppliers = suppliers.filter(\n    (supplier) =>\n      supplier.name.toLowerCase().includes(search.toLowerCase()) ||\n      supplier.email.toLowerCase().includes(search.toLowerCase()) ||\n      supplier.phone.includes(search)\n  );\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-full\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Suppliers</h1>\n          <p className=\"text-muted-foreground\">Manage your supplier relationships</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handleExport} data-testid=\"button-export-suppliers\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export CSV\n          </Button>\n          <Button onClick={() => setIsFormOpen(true)} data-testid=\"button-add-supplier\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add Supplier\n          </Button>\n        </div>\n      </div>\n\n      <SearchBar\n        placeholder=\"Search by name, email, or phone...\"\n        value={search}\n        onChange={setSearch}\n        testId=\"input-search-suppliers\"\n      />\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {filteredSuppliers.length === 0 ? (\n          <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n            No suppliers found\n          </div>\n        ) : (\n          filteredSuppliers.map((supplier) => (\n            <Card\n              key={supplier.id}\n              className=\"hover-elevate\"\n              data-testid={`card-supplier-${supplier.id}`}\n            >\n              <CardHeader className=\"flex flex-row items-start justify-between space-y-0\">\n                <CardTitle className=\"text-lg\">{supplier.name}</CardTitle>\n                <div className=\"flex gap-1\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => handleEdit(supplier)}\n                    data-testid={`button-edit-supplier-${supplier.id}`}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => setDeletingSupplier(supplier.id)}\n                    data-testid={`button-delete-supplier-${supplier.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Phone className=\"h-4 w-4\" />\n                    <span>{supplier.phone}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Mail className=\"h-4 w-4\" />\n                    <span className=\"truncate\">{supplier.email}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      <SupplierFormDialog\n        open={isFormOpen}\n        onOpenChange={(open) => {\n          setIsFormOpen(open);\n          if (!open) setEditingSupplier(null);\n        }}\n        supplier={editingSupplier || undefined}\n        onSubmit={handleSubmit}\n      />\n\n      <DeleteConfirmDialog\n        open={!!deletingSupplier}\n        onOpenChange={(open) => !open && setDeletingSupplier(null)}\n        onConfirm={confirmDelete}\n        title=\"Delete Supplier\"\n        description=\"Are you sure you want to delete this supplier? This action cannot be undone.\"\n      />\n    </div>\n  );\n}\n","size_bytes":7143},"client/src/components/examples/CustomerList.tsx":{"content":"import { CustomerList } from \"../customer-list\";\n\nexport default function CustomerListExample() {\n  const mockCustomers = [\n    {\n      id: \"1\",\n      name: \"John Smith\",\n      phone: \"+1 234 567 8900\",\n      email: \"john.smith@email.com\",\n      totalPurchases: 15,\n      totalSpent: 2450.75,\n    },\n    {\n      id: \"2\",\n      name: \"Emma Wilson\",\n      phone: \"+1 234 567 8901\",\n      email: \"emma.w@email.com\",\n      totalPurchases: 8,\n      totalSpent: 890.50,\n    },\n    {\n      id: \"3\",\n      name: \"Michael Brown\",\n      phone: \"+1 234 567 8902\",\n      email: \"m.brown@email.com\",\n      totalPurchases: 22,\n      totalSpent: 4320.00,\n    },\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <CustomerList\n        customers={mockCustomers}\n        onViewDetails={(customer) => console.log(\"View customer:\", customer)}\n      />\n    </div>\n  );\n}\n","size_bytes":849},"client/src/components/examples/PaymentMethodSelector.tsx":{"content":"import { useState } from \"react\";\nimport { PaymentMethodSelector, PaymentMethod } from \"../payment-method-selector\";\n\nexport default function PaymentMethodSelectorExample() {\n  const [selected, setSelected] = useState<PaymentMethod>(\"cash\");\n\n  return (\n    <div className=\"p-6 max-w-lg\">\n      <PaymentMethodSelector selected={selected} onSelect={setSelected} />\n      <div className=\"mt-4 text-sm text-muted-foreground\">\n        Selected: <span className=\"font-medium\">{selected}</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":520},"client/src/components/examples/ProductTable.tsx":{"content":"import { ProductTable } from \"../product-table\";\n\nexport default function ProductTableExample() {\n  const mockProducts = [\n    {\n      id: \"1\",\n      stockCode: \"PRD-001\",\n      name: \"Wireless Mouse\",\n      category: \"Electronics\",\n      buyingPrice: 15.0,\n      sellingPrice: 29.99,\n      quantity: 45,\n      supplier: \"Tech Supplies Co\",\n    },\n    {\n      id: \"2\",\n      stockCode: \"PRD-002\",\n      name: \"USB Cable\",\n      category: \"Electronics\",\n      buyingPrice: 3.0,\n      sellingPrice: 7.99,\n      quantity: 12,\n      supplier: \"Cable World\",\n    },\n    {\n      id: \"3\",\n      stockCode: \"PRD-003\",\n      name: \"Notebook A4\",\n      category: \"Stationery\",\n      buyingPrice: 1.5,\n      sellingPrice: 3.99,\n      quantity: 0,\n      supplier: \"Paper Plus\",\n    },\n    {\n      id: \"4\",\n      stockCode: \"PRD-004\",\n      name: \"T-Shirt Medium\",\n      category: \"Clothes\",\n      buyingPrice: 8.0,\n      sellingPrice: 19.99,\n      quantity: 78,\n      supplier: \"Fashion Direct\",\n    },\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <ProductTable\n        products={mockProducts}\n        onEdit={(product) => console.log(\"Edit product:\", product)}\n        onDelete={(id) => console.log(\"Delete product:\", id)}\n      />\n    </div>\n  );\n}\n","size_bytes":1243},"client/src/components/examples/ReceiptPreview.tsx":{"content":"import { ReceiptPreview } from \"../receipt-preview\";\n\nexport default function ReceiptPreviewExample() {\n  const mockReceipt = {\n    receiptNumber: \"RCP-2024-001\",\n    date: new Date(),\n    customerName: \"John Smith\",\n    sellerName: \"Sarah Johnson\",\n    items: [\n      {\n        stockCode: \"PRD-001\",\n        name: \"Wireless Mouse\",\n        quantity: 2,\n        unitPrice: 29.99,\n        subtotal: 59.98,\n      },\n      {\n        stockCode: \"PRD-004\",\n        name: \"T-Shirt Medium\",\n        quantity: 1,\n        unitPrice: 19.99,\n        subtotal: 19.99,\n      },\n    ],\n    subtotal: 79.97,\n    discount: 8.0,\n    total: 71.97,\n    paymentMethod: \"card\",\n  };\n\n  return (\n    <div className=\"p-6\">\n      <ReceiptPreview data={mockReceipt} />\n    </div>\n  );\n}\n","size_bytes":762},"client/src/components/examples/SalesCart.tsx":{"content":"import { useState } from \"react\";\nimport { SalesCart, CartItem } from \"../sales-cart\";\n\nexport default function SalesCartExample() {\n  const [items, setItems] = useState<CartItem[]>([\n    {\n      id: \"1\",\n      stockCode: \"PRD-001\",\n      name: \"Wireless Mouse\",\n      price: 29.99,\n      quantity: 2,\n      availableStock: 45,\n    },\n    {\n      id: \"2\",\n      stockCode: \"PRD-004\",\n      name: \"T-Shirt Medium\",\n      price: 19.99,\n      quantity: 1,\n      availableStock: 78,\n    },\n  ]);\n\n  const [discount, setDiscount] = useState(0);\n  const [discountType, setDiscountType] = useState<\"percentage\" | \"fixed\">(\"percentage\");\n\n  const handleQuantityChange = (id: string, quantity: number) => {\n    setItems((prev) =>\n      prev.map((item) => (item.id === id ? { ...item, quantity } : item))\n    );\n  };\n\n  const handleRemoveItem = (id: string) => {\n    setItems((prev) => prev.filter((item) => item.id !== id));\n  };\n\n  return (\n    <div className=\"p-6 max-w-md\">\n      <SalesCart\n        items={items}\n        onQuantityChange={handleQuantityChange}\n        onRemoveItem={handleRemoveItem}\n        discount={discount}\n        onDiscountChange={setDiscount}\n        discountType={discountType}\n        onDiscountTypeChange={setDiscountType}\n      />\n    </div>\n  );\n}\n","size_bytes":1272},"client/src/components/examples/SearchBar.tsx":{"content":"import { useState } from \"react\";\nimport { SearchBar } from \"../search-bar\";\n\nexport default function SearchBarExample() {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <div className=\"p-6 max-w-md\">\n      <SearchBar\n        placeholder=\"Search products...\"\n        value={value}\n        onChange={setValue}\n        testId=\"input-search\"\n      />\n      {value && (\n        <div className=\"mt-4 text-sm text-muted-foreground\">\n          Searching for: <span className=\"font-medium\">{value}</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":550},"client/src/components/examples/StatCard.tsx":{"content":"import { StatCard } from \"../stat-card\";\nimport { Package, DollarSign, AlertTriangle, TrendingUp } from \"lucide-react\";\n\nexport default function StatCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 p-6\">\n      <StatCard\n        title=\"Total Products\"\n        value=\"1,284\"\n        change={12}\n        icon={Package}\n        testId=\"card-total-products\"\n      />\n      <StatCard\n        title=\"Today's Sales\"\n        value=\"$4,320\"\n        change={8.2}\n        icon={DollarSign}\n        testId=\"card-todays-sales\"\n      />\n      <StatCard\n        title=\"Low Stock Alerts\"\n        value=\"23\"\n        change={-15}\n        icon={AlertTriangle}\n        testId=\"card-low-stock\"\n      />\n      <StatCard\n        title=\"Profit Today\"\n        value=\"$1,840\"\n        change={5.4}\n        icon={TrendingUp}\n        testId=\"card-profit\"\n      />\n    </div>\n  );\n}\n","size_bytes":903},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from \"../theme-toggle\";\nimport { ThemeProvider } from \"../theme-provider\";\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-6\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  );\n}\n","size_bytes":270},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n        success:\n          \"border-transparent bg-success text-primary-foreground shadow-xs\",\n        warning:\n          \"border-transparent bg-warning text-primary-foreground shadow-xs\",\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1389},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}